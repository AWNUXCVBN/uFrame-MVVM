// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;


public abstract class CheckerBoardControllerBase : Controller {
    
    [Inject("CheckersGame")] public CheckersGameViewModel CheckersGame { get; set; }
    [Inject("CheckerBoard")] public CheckerBoardViewModel CheckerBoard { get; set; }
    [Inject] public CheckersGameController CheckersGameController {get;set;}
    [Inject] public CheckerController CheckerController {get;set;}
    [Inject] public CheckerPlateController CheckerPlateController {get;set;}
    public abstract void InitializeCheckerBoard(CheckerBoardViewModel checkerBoard);
    
    public override ViewModel CreateEmpty() {
        return new CheckerBoardViewModel();
    }
    
    public virtual CheckerBoardViewModel CreateCheckerBoard() {
        return ((CheckerBoardViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeCheckerBoard(((CheckerBoardViewModel)(viewModel)));
    }
}

public abstract class CheckerMoveControllerBase : Controller {
    
    [Inject("CheckersGame")] public CheckersGameViewModel CheckersGame { get; set; }
    [Inject("CheckerBoard")] public CheckerBoardViewModel CheckerBoard { get; set; }
    [Inject] public CheckersGameController CheckersGameController {get;set;}
    public abstract void InitializeCheckerMove(CheckerMoveViewModel checkerMove);
    
    public override ViewModel CreateEmpty() {
        return new CheckerMoveViewModel();
    }
    
    public virtual CheckerMoveViewModel CreateCheckerMove() {
        return ((CheckerMoveViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeCheckerMove(((CheckerMoveViewModel)(viewModel)));
    }
}

public abstract class CheckerPlateControllerBase : Controller {
    
    [Inject("CheckersGame")] public CheckersGameViewModel CheckersGame { get; set; }
    [Inject("CheckerBoard")] public CheckerBoardViewModel CheckerBoard { get; set; }
    [Inject] public CheckerBoardController CheckerBoardController {get;set;}
    public abstract void InitializeCheckerPlate(CheckerPlateViewModel checkerPlate);
    
    public override ViewModel CreateEmpty() {
        return new CheckerPlateViewModel();
    }
    
    public virtual CheckerPlateViewModel CreateCheckerPlate() {
        return ((CheckerPlateViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeCheckerPlate(((CheckerPlateViewModel)(viewModel)));
    }
    
    public virtual void SelectCommand(CheckerPlateViewModel checkerPlate) {
    }
}

public abstract class CheckersGameControllerBase : Controller {
    
    [Inject("CheckersGame")] public CheckersGameViewModel CheckersGame { get; set; }
    [Inject("CheckerBoard")] public CheckerBoardViewModel CheckerBoard { get; set; }
    [Inject] public CheckerBoardController CheckerBoardController {get;set;}
    [Inject] public CheckerController CheckerController {get;set;}
    [Inject] public CheckerMoveController CheckerMoveController {get;set;}
    public abstract void InitializeCheckersGame(CheckersGameViewModel checkersGame);
    
    public override ViewModel CreateEmpty() {
        return new CheckersGameViewModel();
    }
    
    public virtual CheckersGameViewModel CreateCheckersGame() {
        return ((CheckersGameViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeCheckersGame(((CheckersGameViewModel)(viewModel)));
    }
    
    public virtual void GameOver(CheckersGameViewModel checkersGame) {
        this.GameEvent("GameOver");
    }
}

public abstract class CheckerControllerBase : Controller {
    
    [Inject("CheckersGame")] public CheckersGameViewModel CheckersGame { get; set; }
    [Inject("CheckerBoard")] public CheckerBoardViewModel CheckerBoard { get; set; }
    [Inject] public CheckerBoardController CheckerBoardController {get;set;}
    [Inject] public CheckersGameController CheckersGameController {get;set;}
    public abstract void InitializeChecker(CheckerViewModel checker);
    
    public override ViewModel CreateEmpty() {
        return new CheckerViewModel();
    }
    
    public virtual CheckerViewModel CreateChecker() {
        return ((CheckerViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeChecker(((CheckerViewModel)(viewModel)));
    }
    
    public virtual void SelectCommand(CheckerViewModel checker) {
    }
}

public abstract class AICheckersGameControllerBase : CheckersGameController {
    
    public abstract void InitializeAICheckersGame(AICheckersGameViewModel aICheckersGame);
    
    public override ViewModel CreateEmpty() {
        return new AICheckersGameViewModel();
    }
    
    public virtual AICheckersGameViewModel CreateAICheckersGame() {
        return ((AICheckersGameViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeAICheckersGame(((AICheckersGameViewModel)(viewModel)));
    }
}

public abstract class MainMenuControllerBase : Controller {
    
    [Inject("CheckersGame")] public CheckersGameViewModel CheckersGame { get; set; }
    [Inject("CheckerBoard")] public CheckerBoardViewModel CheckerBoard { get; set; }
    public abstract void InitializeMainMenu(MainMenuViewModel mainMenu);
    
    public override ViewModel CreateEmpty() {
        return new MainMenuViewModel();
    }
    
    public virtual MainMenuViewModel CreateMainMenu() {
        return ((MainMenuViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeMainMenu(((MainMenuViewModel)(viewModel)));
    }
    
    public virtual void Play(MainMenuViewModel mainMenu) {
        this.GameEvent("Play");
    }
}
