// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;


[System.SerializableAttribute()]
public sealed partial class CheckersMenuSceneManagerSettings {
    
    public string[] _Scenes;
}

public class CheckersMenuSceneManagerBase : SceneManager {
    
    public CheckersSceneManagerSettings _PlayTransition = new CheckersSceneManagerSettings();
    
    private MainMenuController _MainMenuController;
    
    public CheckersMenuSceneManagerSettings _CheckersMenuSceneManagerSettings = new CheckersMenuSceneManagerSettings();
    
    [Inject()]
    public virtual MainMenuController MainMenuController {
        get {
            if ((this._MainMenuController == null)) {
                this._MainMenuController = new MainMenuController() { Container = Container, Context = Context };
            }
            return this._MainMenuController;
        }
        set {
            _MainMenuController = value;
        }
    }
    
    public override void Setup() {
        base.Setup();
        Container.RegisterInstance(MainMenuController,false);
        this.Container.InjectAll();
    }
    
    public virtual void Play() {
        GameManager.TransitionLevel<CheckersSceneManager>((container) =>{container._CheckersSceneManagerSettings = _PlayTransition; }, this._PlayTransition._Scenes);
    }
}

public enum CheckersMenuSceneManagerRegistry {
}

[System.SerializableAttribute()]
public sealed partial class CheckersSceneManagerSettings {
    
    public string[] _Scenes;
}

public class CheckersSceneManagerBase : SceneManager {
    
    public CheckersMenuSceneManagerSettings _GameOverTransition = new CheckersMenuSceneManagerSettings();
    
    private AICheckersGameViewModel _CheckersGame;
    
    private CheckerBoardViewModel _CheckerBoard;
    
    private AICheckersGameController _AICheckersGameController;
    
    private CheckerBoardController _CheckerBoardController;
    
    private CheckerPlateController _CheckerPlateController;
    
    private CheckersGameController _CheckersGameController;
    
    private CheckerController _CheckerController;
    
    public CheckersSceneManagerSettings _CheckersSceneManagerSettings = new CheckersSceneManagerSettings();
    
    [Inject("CheckersGame")]
    public virtual AICheckersGameViewModel CheckersGame {
        get {
            if ((this._CheckersGame == null)) {
                this._CheckersGame = SetupViewModel<AICheckersGameViewModel>(AICheckersGameController, "CheckersGame");
            }
            return this._CheckersGame;
        }
        set {
            _CheckersGame = value;
        }
    }
    
    [Inject("CheckerBoard")]
    public virtual CheckerBoardViewModel CheckerBoard {
        get {
            if ((this._CheckerBoard == null)) {
                this._CheckerBoard = SetupViewModel<CheckerBoardViewModel>(CheckerBoardController, "CheckerBoard");
            }
            return this._CheckerBoard;
        }
        set {
            _CheckerBoard = value;
        }
    }
    
    [Inject()]
    public virtual AICheckersGameController AICheckersGameController {
        get {
            if ((this._AICheckersGameController == null)) {
                this._AICheckersGameController = new AICheckersGameController() { Container = Container, Context = Context };
            }
            return this._AICheckersGameController;
        }
        set {
            _AICheckersGameController = value;
        }
    }
    
    [Inject()]
    public virtual CheckerBoardController CheckerBoardController {
        get {
            if ((this._CheckerBoardController == null)) {
                this._CheckerBoardController = new CheckerBoardController() { Container = Container, Context = Context };
            }
            return this._CheckerBoardController;
        }
        set {
            _CheckerBoardController = value;
        }
    }
    
    [Inject()]
    public virtual CheckerPlateController CheckerPlateController {
        get {
            if ((this._CheckerPlateController == null)) {
                this._CheckerPlateController = new CheckerPlateController() { Container = Container, Context = Context };
            }
            return this._CheckerPlateController;
        }
        set {
            _CheckerPlateController = value;
        }
    }
    
    [Inject()]
    public virtual CheckersGameController CheckersGameController {
        get {
            if ((this._CheckersGameController == null)) {
                this._CheckersGameController = new CheckersGameController() { Container = Container, Context = Context };
            }
            return this._CheckersGameController;
        }
        set {
            _CheckersGameController = value;
        }
    }
    
    [Inject()]
    public virtual CheckerController CheckerController {
        get {
            if ((this._CheckerController == null)) {
                this._CheckerController = new CheckerController() { Container = Container, Context = Context };
            }
            return this._CheckerController;
        }
        set {
            _CheckerController = value;
        }
    }
    
    public override void Setup() {
        base.Setup();
        Container.RegisterInstance<AICheckersGameViewModel>(CheckersGame,"CheckersGame");
        Container.RegisterInstance<CheckersGameViewModel>(CheckersGame,"CheckersGame");
        Container.RegisterInstance<CheckerBoardViewModel>(CheckerBoard,"CheckerBoard");
        Container.RegisterInstance(AICheckersGameController,false);
        Container.RegisterInstance(CheckerBoardController,false);
        Container.RegisterInstance(CheckerPlateController,false);
        Container.RegisterInstance(CheckersGameController,false);
        Container.RegisterInstance(CheckerController,false);
        this.Container.InjectAll();
    }
    
    public virtual void GameOver() {
        GameManager.TransitionLevel<CheckersMenuSceneManager>((container) =>{container._CheckersMenuSceneManagerSettings = _GameOverTransition; }, this._GameOverTransition._Scenes);
    }
}

public enum CheckersSceneManagerRegistry {
    
    CheckersGame,
}
