// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Invert.StateMachine;


public class EnemyStateAIBase : Invert.StateMachine.StateMachine {
    
    private AttackState _Attack;
    
    private WaitForSpeedState _WaitForSpeed;
    
    public EnemyStateAIBase(ViewModel vm, string propertyName) : 
            base(vm, propertyName) {
    }
    
    public virtual AttackState Attack {
        get {
            if ((this._Attack == null)) {
                this._Attack = new AttackState();
            }
            return this._Attack;
        }
    }
    
    public virtual WaitForSpeedState WaitForSpeed {
        get {
            if ((this._WaitForSpeed == null)) {
                this._WaitForSpeed = new WaitForSpeedState();
            }
            return this._WaitForSpeed;
        }
    }
    
    public override void Compose(List<State> states) {
        base.Compose(states);
        this.Attack.StateMachine = this;
        Attack.PlayerOutOfSight = new StateTransition("PlayerOutOfSight", Attack,WaitForSpeed);
        states.Add(Attack);
        this.WaitForSpeed.StateMachine = this;
        WaitForSpeed.StartAttacking = new StateTransition("StartAttacking", WaitForSpeed,Attack);
        states.Add(WaitForSpeed);
    }
}

public class AttackStateBase : Invert.StateMachine.State {
    
    private StateTransition _PlayerOutOfSight;
    
    public virtual StateTransition PlayerOutOfSight {
        get {
            return this._PlayerOutOfSight;
        }
        set {
            _PlayerOutOfSight = value;
        }
    }
    
    public override string Name {
        get {
            return "Attack";
        }
    }
    
    public override void Compose(List<StateTransition> transitions) {
        base.Compose(transitions);
        transitions.Add(this.PlayerOutOfSight);;
    }
    
    private void PlayerOutOfSightTransition() {
        this.Transition(this.PlayerOutOfSight);
    }
}

public class WaitForSpeedStateBase : Invert.StateMachine.State {
    
    private StateTransition _StartAttacking;
    
    public virtual StateTransition StartAttacking {
        get {
            return this._StartAttacking;
        }
        set {
            _StartAttacking = value;
        }
    }
    
    public override string Name {
        get {
            return "WaitForSpeed";
        }
    }
    
    public override void Compose(List<StateTransition> transitions) {
        base.Compose(transitions);
        transitions.Add(this.StartAttacking);;
    }
    
    private void StartAttackingTransition() {
        this.Transition(this.StartAttacking);
    }
}
