// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;


public abstract class MainMenuSceneControllerBase : Controller {
    
    [Inject] public MenuScreenController MenuScreenController {get;set;}
    public virtual MainMenuSceneViewModel MainMenuScene {
        get {
            return Container.Resolve<MainMenuSceneViewModel>();
        }
    }
    
    public abstract void InitializeMainMenuScene(MainMenuSceneViewModel mainMenuScene);
    
    public override void WireCommands(ViewModel viewModel) {
        var mainMenuScene = viewModel as MainMenuSceneViewModel;
        mainMenuScene.PlayGame = new Command(PlayGame);
    }
    
    public override ViewModel CreateEmpty() {
        return new MainMenuSceneViewModel();
    }
    
    public virtual MainMenuSceneViewModel CreateMainMenuScene() {
        return ((MainMenuSceneViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeMainMenuScene(((MainMenuSceneViewModel)(viewModel)));
    }
    
    public virtual void PlayGame() {
        this.GameEvent("PlayGame");
    }
}

public abstract class MenuScreenControllerBase : Controller {
    
    [Inject] public MainMenuSceneController MainMenuSceneController {get;set;}
    public abstract void InitializeMenuScreen(MenuScreenViewModel menuScreen);
    
    public override void WireCommands(ViewModel viewModel) {
    }
    
    public virtual MenuScreenViewModel CreateMenuScreen() {
        return ((MenuScreenViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeMenuScreen(((MenuScreenViewModel)(viewModel)));
    }
}

public abstract class LoginScreenControllerBase : MenuScreenController {
    
    public abstract void InitializeLoginScreen(LoginScreenViewModel loginScreen);
    
    public override void WireCommands(ViewModel viewModel) {
        base.WireCommands(viewModel);
        var loginScreen = viewModel as LoginScreenViewModel;
        loginScreen.Login = new CommandWithSender<LoginScreenViewModel>(loginScreen, Login);
    }
    
    public override ViewModel CreateEmpty() {
        return new LoginScreenViewModel();
    }
    
    public virtual LoginScreenViewModel CreateLoginScreen() {
        return ((LoginScreenViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeLoginScreen(((LoginScreenViewModel)(viewModel)));
    }
    
    public virtual void Login(LoginScreenViewModel loginScreen) {
    }
}

public abstract class MainMenuScreenControllerBase : MenuScreenController {
    
    public abstract void InitializeMainMenuScreen(MainMenuScreenViewModel mainMenuScreen);
    
    public override void WireCommands(ViewModel viewModel) {
        base.WireCommands(viewModel);
        var mainMenuScreen = viewModel as MainMenuScreenViewModel;
        mainMenuScreen.Play = new CommandWithSender<MainMenuScreenViewModel>(mainMenuScreen, Play);
        mainMenuScreen.LogOff = new CommandWithSender<MainMenuScreenViewModel>(mainMenuScreen, LogOff);
    }
    
    public override ViewModel CreateEmpty() {
        return new MainMenuScreenViewModel();
    }
    
    public virtual MainMenuScreenViewModel CreateMainMenuScreen() {
        return ((MainMenuScreenViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeMainMenuScreen(((MainMenuScreenViewModel)(viewModel)));
    }
    
    public virtual void Play(MainMenuScreenViewModel mainMenuScreen) {
    }
    
    public virtual void LogOff(MainMenuScreenViewModel mainMenuScreen) {
    }
}

public abstract class GameRootControllerBase : Controller {
    
    public virtual GameRootViewModel GameRoot {
        get {
            return Container.Resolve<GameRootViewModel>();
        }
    }
    
    public abstract void InitializeGameRoot(GameRootViewModel gameRoot);
    
    public override void WireCommands(ViewModel viewModel) {
        var gameRoot = viewModel as GameRootViewModel;
        gameRoot.MainMenu = new Command(MainMenu);
    }
    
    public override ViewModel CreateEmpty() {
        return new GameRootViewModel();
    }
    
    public virtual GameRootViewModel CreateGameRoot() {
        return ((GameRootViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeGameRoot(((GameRootViewModel)(viewModel)));
    }
    
    public virtual void MainMenu() {
        this.GameEvent("MainMenu");
    }
}

[System.SerializableAttribute()]
public sealed partial class MainMenuSceneManagerSettings {
    
    public string[] _Scenes;
}

public class MainMenuSceneManagerBase : SceneManager {
    
    public GameSceneManagerSettings _PlayGameTransition = new GameSceneManagerSettings();
    
    public MainMenuSceneManagerSettings _MainMenuSceneManagerSettings = new MainMenuSceneManagerSettings();
    
    public MainMenuSceneController MainMenuSceneController { get; set; }
    public LoginScreenController LoginScreenController { get; set; }
    public MainMenuScreenController MainMenuScreenController { get; set; }
    public override void Setup() {
        base.Setup();
        this.MainMenuSceneController = new MainMenuSceneController();
        this.Container.RegisterInstance(this.MainMenuSceneController, false);
        this.LoginScreenController = new LoginScreenController();
        this.Container.RegisterInstance(this.LoginScreenController, false);
        this.MainMenuScreenController = new MainMenuScreenController();
        this.Container.RegisterInstance(this.MainMenuScreenController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<MainMenuSceneViewModel>(MainMenuSceneController.CreateEmpty() as MainMenuSceneViewModel, false);
    }
    
    public virtual void PlayGame() {
        GameManager.SwitchGameAndLevel<GameSceneManager>((container) =>{container._GameSceneManagerSettings = _PlayGameTransition; }, this._PlayGameTransition._Scenes);
    }
}

[System.SerializableAttribute()]
public sealed partial class GameSceneManagerSettings {
    
    public string[] _Scenes;
}

public class GameSceneManagerBase : SceneManager {
    
    public MainMenuSceneManagerSettings _MainMenuTransition = new MainMenuSceneManagerSettings();
    
    public GameSceneManagerSettings _GameSceneManagerSettings = new GameSceneManagerSettings();
    
    public GameRootController GameRootController { get; set; }
    public override void Setup() {
        base.Setup();
        this.GameRootController = new GameRootController();
        this.Container.RegisterInstance(this.GameRootController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<GameRootViewModel>(GameRootController.CreateEmpty() as GameRootViewModel, false);
    }
    
    public virtual void MainMenu() {
        GameManager.SwitchGameAndLevel<MainMenuSceneManager>((container) =>{container._MainMenuSceneManagerSettings = _MainMenuTransition; }, this._MainMenuTransition._Scenes);
    }
}
