// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;
using UnityEngine;


[DiagramInfoAttribute("MainMenuTutorial")]
public abstract class MainMenuSceneViewBase : ViewBase {
    
    [UFToggleGroup("StartScreen")]
    [UnityEngine.HideInInspector()]
    public bool _BindStartScreen;
    
    [UFGroup("StartScreen")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetStartScreenTwoWayValue")]
    public bool _StartScreenIsTwoWay;
    
    [UFGroup("StartScreen")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _StartScreenPrefab;
    
    [UFToggleGroup("MenuScreens")]
    [UnityEngine.HideInInspector()]
    public bool _BindMenuScreens;
    
    [UnityEngine.HideInInspector()]
    public System.Collections.Generic.List<MenuScreenViewBase> _MenuScreensList;
    
    [UFGroup("MenuScreens")]
    [UnityEngine.HideInInspector()]
    public bool _MenuScreensSceneFirst;
    
    [UFGroup("MenuScreens")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _MenuScreensContainer;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _StartScreen;
    
    public override System.Type ViewModelType {
        get {
            return typeof(MainMenuSceneViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public MainMenuSceneViewModel MainMenuScene {
        get {
            return ((MainMenuSceneViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void StartScreenChanged(MenuScreenViewModel value) {
        if (value == null) {
            Destroy(_StartScreen.gameObject);
        }
        if (_StartScreenPrefab == null) {
            this._StartScreen = ((MenuScreenViewBase)(this.InstantiateView(value)));
        }
        else {
            this._StartScreen = ((MenuScreenViewBase)(this.InstantiateView(this._StartScreenPrefab, value)));
        }
    }
    
    public virtual MenuScreenViewModel GetStartScreenTwoWayValue() {
        if (this._StartScreen == null || this._StartScreen.ViewModelObject == null) {
            return null;
        }
        return ((MenuScreenViewModel)(this._StartScreen.ViewModelObject));
    }
    
    public virtual void MenuScreensAdded(MenuScreenViewBase menuScreen) {
        this._MenuScreensList.Add(menuScreen);
    }
    
    public virtual void MenuScreensRemoved(MenuScreenViewBase menuScreen) {
        this._MenuScreensList.Remove(menuScreen);
        UnityEngine.Object.Destroy(menuScreen.gameObject);
    }
    
    public virtual ViewBase CreateMenuScreensView(MenuScreenViewModel menuScreen) {
        return this.InstantiateView(menuScreen);
    }
    
    public override void Bind() {
        if (this._BindStartScreen) {
            if (this._StartScreenIsTwoWay) {
                this.BindProperty(()=>MainMenuScene._StartScreenProperty, this.StartScreenChanged, this.GetStartScreenTwoWayValue);
            }
            else {
                this.BindProperty(()=>MainMenuScene._StartScreenProperty, this.StartScreenChanged);
            }
        }
        if (this._BindMenuScreens) {
            var binding = this.BindToViewCollection(() => MainMenuScene._MenuScreensProperty);
            binding.SetAddHandler(item=>MenuScreensAdded(item as MenuScreenViewBase));
            binding.SetRemoveHandler(item=>MenuScreensRemoved(item as MenuScreenViewBase));
            binding.SetCreateHandler(viewModel=>{ return CreateMenuScreensView(viewModel as MenuScreenViewModel); }); ;
            if ((_MenuScreensContainer == null)) {
            }
            else {
                binding.SetParent(_MenuScreensContainer);
            }
            if (_MenuScreensSceneFirst) {
                binding.ViewFirst();
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MainMenuSceneController>());
    }
    
    public virtual void ExecutePlayGame() {
        this.ExecuteCommand(MainMenuScene.PlayGame);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        MainMenuSceneViewModel mainMenuScene = ((MainMenuSceneViewModel)(viewModel));
        mainMenuScene.StartScreen = this._StartScreen == null ? null : this._StartScreen.ViewModelObject as MenuScreenViewModel;
    }
}

[DiagramInfoAttribute("MainMenuTutorial")]
public abstract class MenuScreenViewBase : ViewBase {
    
    [UFToggleGroup("Active")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ActiveChanged")]
    public bool _BindActive;
    
    [UFGroup("Active")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetActiveTwoWayValue")]
    public bool _ActiveIsTwoWay;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public bool _Active;
    
    public override System.Type ViewModelType {
        get {
            return typeof(MenuScreenViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public MenuScreenViewModel MenuScreen {
        get {
            return ((MenuScreenViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void ActiveChanged(bool value) {
    }
    
    public virtual bool GetActiveTwoWayValue() {
        throw new System.NotImplementedException();
    }
    
    public override void Bind() {
        if (this._BindActive) {
            if (this._ActiveIsTwoWay) {
                this.BindProperty(()=>MenuScreen._ActiveProperty, this.ActiveChanged, this.GetActiveTwoWayValue);
            }
            else {
                this.BindProperty(()=>MenuScreen._ActiveProperty, this.ActiveChanged);
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MenuScreenController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        MenuScreenViewModel menuScreen = ((MenuScreenViewModel)(viewModel));
        menuScreen.Active = this._Active;
    }
}

[DiagramInfoAttribute("MainMenuTutorial")]
public abstract class LoginScreenViewBase : MenuScreenViewBase {
    
    [UFToggleGroup("Username")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("UsernameChanged")]
    public bool _BindUsername;
    
    [UFGroup("Username")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetUsernameTwoWayValue")]
    public bool _UsernameIsTwoWay;
    
    [UFToggleGroup("Password")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("PasswordChanged")]
    public bool _BindPassword;
    
    [UFGroup("Password")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetPasswordTwoWayValue")]
    public bool _PasswordIsTwoWay;
    
    [UFToggleGroup("ErrorMessage")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ErrorMessageChanged")]
    public bool _BindErrorMessage;
    
    [UFGroup("ErrorMessage")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetErrorMessageTwoWayValue")]
    public bool _ErrorMessageIsTwoWay;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _Username;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _Password;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _ErrorMessage;
    
    public override System.Type ViewModelType {
        get {
            return typeof(LoginScreenViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public LoginScreenViewModel LoginScreen {
        get {
            return ((LoginScreenViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void UsernameChanged(string value) {
    }
    
    public virtual string GetUsernameTwoWayValue() {
        throw new System.NotImplementedException();
    }
    
    public virtual void PasswordChanged(string value) {
    }
    
    public virtual string GetPasswordTwoWayValue() {
        throw new System.NotImplementedException();
    }
    
    public virtual void ErrorMessageChanged(string value) {
    }
    
    public virtual string GetErrorMessageTwoWayValue() {
        throw new System.NotImplementedException();
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindUsername) {
            if (this._UsernameIsTwoWay) {
                this.BindProperty(()=>LoginScreen._UsernameProperty, this.UsernameChanged, this.GetUsernameTwoWayValue);
            }
            else {
                this.BindProperty(()=>LoginScreen._UsernameProperty, this.UsernameChanged);
            }
        }
        if (this._BindPassword) {
            if (this._PasswordIsTwoWay) {
                this.BindProperty(()=>LoginScreen._PasswordProperty, this.PasswordChanged, this.GetPasswordTwoWayValue);
            }
            else {
                this.BindProperty(()=>LoginScreen._PasswordProperty, this.PasswordChanged);
            }
        }
        if (this._BindErrorMessage) {
            if (this._ErrorMessageIsTwoWay) {
                this.BindProperty(()=>LoginScreen._ErrorMessageProperty, this.ErrorMessageChanged, this.GetErrorMessageTwoWayValue);
            }
            else {
                this.BindProperty(()=>LoginScreen._ErrorMessageProperty, this.ErrorMessageChanged);
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LoginScreenController>());
    }
    
    public virtual void ExecuteLogin() {
        this.ExecuteCommand(LoginScreen.Login);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        LoginScreenViewModel loginScreen = ((LoginScreenViewModel)(viewModel));
        loginScreen.Username = this._Username;
        loginScreen.Password = this._Password;
        loginScreen.ErrorMessage = this._ErrorMessage;
    }
}

[DiagramInfoAttribute("MainMenuTutorial")]
public abstract class MainMenuScreenViewBase : MenuScreenViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(MainMenuScreenViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public MainMenuScreenViewModel MainMenuScreen {
        get {
            return ((MainMenuScreenViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MainMenuScreenController>());
    }
    
    public virtual void ExecutePlay() {
        this.ExecuteCommand(MainMenuScreen.Play);
    }
    
    public virtual void ExecuteLogOff() {
        this.ExecuteCommand(MainMenuScreen.LogOff);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("MainMenuTutorial")]
public abstract class GameRootViewBase : ViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(GameRootViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public GameRootViewModel GameRoot {
        get {
            return ((GameRootViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GameRootController>());
    }
    
    public virtual void ExecuteMainMenu() {
        this.ExecuteCommand(GameRoot.MainMenu);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
}

public abstract partial class MenuScreenView : MenuScreenViewBase {
}

public partial class LoginScreenView : LoginScreenViewViewBase {
}

[DiagramInfoAttribute("MainMenuTutorial")]
public abstract class LoginScreenViewViewBase : MenuScreenView {
    
    [UFToggleGroup("Username")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("UsernameChanged")]
    public bool _BindUsername;
    
    [UFGroup("Username")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetUsernameTwoWayValue")]
    public bool _UsernameIsTwoWay;
    
    [UFToggleGroup("Password")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("PasswordChanged")]
    public bool _BindPassword;
    
    [UFGroup("Password")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetPasswordTwoWayValue")]
    public bool _PasswordIsTwoWay;
    
    [UFToggleGroup("ErrorMessage")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ErrorMessageChanged")]
    public bool _BindErrorMessage;
    
    [UFGroup("ErrorMessage")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetErrorMessageTwoWayValue")]
    public bool _ErrorMessageIsTwoWay;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _Username;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _Password;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _ErrorMessage;
    
    public override System.Type ViewModelType {
        get {
            return typeof(LoginScreenViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public LoginScreenViewModel LoginScreen {
        get {
            return ((LoginScreenViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void UsernameChanged(string value) {
    }
    
    public virtual string GetUsernameTwoWayValue() {
        throw new System.NotImplementedException();
    }
    
    public virtual void PasswordChanged(string value) {
    }
    
    public virtual string GetPasswordTwoWayValue() {
        throw new System.NotImplementedException();
    }
    
    public virtual void ErrorMessageChanged(string value) {
    }
    
    public virtual string GetErrorMessageTwoWayValue() {
        throw new System.NotImplementedException();
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindUsername) {
            if (this._UsernameIsTwoWay) {
                this.BindProperty(()=>LoginScreen._UsernameProperty, this.UsernameChanged, this.GetUsernameTwoWayValue);
            }
            else {
                this.BindProperty(()=>LoginScreen._UsernameProperty, this.UsernameChanged);
            }
        }
        if (this._BindPassword) {
            if (this._PasswordIsTwoWay) {
                this.BindProperty(()=>LoginScreen._PasswordProperty, this.PasswordChanged, this.GetPasswordTwoWayValue);
            }
            else {
                this.BindProperty(()=>LoginScreen._PasswordProperty, this.PasswordChanged);
            }
        }
        if (this._BindErrorMessage) {
            if (this._ErrorMessageIsTwoWay) {
                this.BindProperty(()=>LoginScreen._ErrorMessageProperty, this.ErrorMessageChanged, this.GetErrorMessageTwoWayValue);
            }
            else {
                this.BindProperty(()=>LoginScreen._ErrorMessageProperty, this.ErrorMessageChanged);
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<LoginScreenController>());
    }
    
    public virtual void ExecuteLogin() {
        this.ExecuteCommand(LoginScreen.Login);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        LoginScreenViewModel loginScreen = ((LoginScreenViewModel)(viewModel));
        loginScreen.Username = this._Username;
        loginScreen.Password = this._Password;
        loginScreen.ErrorMessage = this._ErrorMessage;
    }
}

public partial class MainMenuScreenView : MainMenuScreenViewViewBase {
}

[DiagramInfoAttribute("MainMenuTutorial")]
public abstract class MainMenuScreenViewViewBase : MenuScreenView {
    
    public override System.Type ViewModelType {
        get {
            return typeof(MainMenuScreenViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public MainMenuScreenViewModel MainMenuScreen {
        get {
            return ((MainMenuScreenViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MainMenuScreenController>());
    }
    
    public virtual void ExecutePlay() {
        this.ExecuteCommand(MainMenuScreen.Play);
    }
    
    public virtual void ExecuteLogOff() {
        this.ExecuteCommand(MainMenuScreen.LogOff);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class MainMenuSceneView : MainMenuSceneViewBase {
}

public partial class GameRootView : GameRootViewBase {
}
