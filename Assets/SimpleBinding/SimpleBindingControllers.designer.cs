// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;


public abstract class GameElementControllerBase : Controller {
    
    [Inject] public PlayerElementController PlayerElementController {get;set;}
    public virtual GameElementViewModel GameElement {
        get {
            return Container.Resolve<GameElementViewModel>();
        }
    }
    
    public abstract void InitializeGameElement(GameElementViewModel gameElement);
    
    public override void WireCommands(ViewModel viewModel) {
    }
    
    public override ViewModel CreateEmpty() {
        return new GameElementViewModel();
    }
    
    public virtual GameElementViewModel CreateGameElement() {
        return ((GameElementViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeGameElement(((GameElementViewModel)(viewModel)));
    }
}

public abstract class PlayerElementControllerBase : Controller {
    
    [Inject] public GameElementController GameElementController {get;set;}
    public virtual PlayerElementViewModel PlayerElement {
        get {
            return Container.Resolve<PlayerElementViewModel>();
        }
    }
    
    public abstract void InitializePlayerElement(PlayerElementViewModel playerElement);
    
    public override void WireCommands(ViewModel viewModel) {
    }
    
    public override ViewModel CreateEmpty() {
        return new PlayerElementViewModel();
    }
    
    public virtual PlayerElementViewModel CreatePlayerElement() {
        return ((PlayerElementViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializePlayerElement(((PlayerElementViewModel)(viewModel)));
    }
}

[System.SerializableAttribute()]
public sealed partial class TutorialSceneManagerSettings {
    
    public string[] _Scenes;
}

public class TutorialSceneManagerBase : SceneManager {
    
    public TutorialSceneManagerSettings _TutorialSceneManagerSettings = new TutorialSceneManagerSettings();
    
    public GameElementController GameElementController { get; set; }
    public PlayerElementController PlayerElementController { get; set; }
    public override void Setup() {
        base.Setup();
        this.GameElementController = new GameElementController();
        this.Container.RegisterInstance(this.GameElementController, false);
        this.PlayerElementController = new PlayerElementController();
        this.Container.RegisterInstance(this.PlayerElementController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<GameElementViewModel>(GameElementController.CreateGameElement(), false);
        Container.RegisterInstance<PlayerElementViewModel>(PlayerElementController.CreatePlayerElement(), false);
    }
}
