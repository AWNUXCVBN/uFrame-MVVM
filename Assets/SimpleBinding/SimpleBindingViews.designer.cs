// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;
using UnityEngine;


[DiagramInfoAttribute("SimpleBinding")]
public abstract class GameElementViewBase : ViewBase {
    
    [UFToggleGroup("Player")]
    [UnityEngine.HideInInspector()]
    public bool _BindPlayer;
    
    [UFGroup("Player")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetPlayerTwoWayValue")]
    public bool _PlayerIsTwoWay;
    
    [UFGroup("Player")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _PlayerPrefab;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public PlayerElementViewBase _Player;
    
    public override System.Type ViewModelType {
        get {
            return typeof(GameElementViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public GameElementViewModel GameElement {
        get {
            return ((GameElementViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void PlayerChanged(PlayerElementViewModel value) {
        if (value == null) {
            Destroy(_Player.gameObject);
        }
        if (_PlayerPrefab == null) {
            this._Player = ((PlayerElementViewBase)(this.InstantiateView(value)));
        }
        else {
            this._Player = ((PlayerElementViewBase)(this.InstantiateView(this._PlayerPrefab, value)));
        }
    }
    
    public virtual PlayerElementViewModel GetPlayerTwoWayValue() {
        if (this._Player == null || this._Player.ViewModelObject == null) {
            return null;
        }
        return ((PlayerElementViewModel)(this._Player.ViewModelObject));
    }
    
    public override void Bind() {
        if (this._BindPlayer) {
            if (this._PlayerIsTwoWay) {
                this.BindProperty(()=>GameElement._PlayerProperty, this.PlayerChanged, this.GetPlayerTwoWayValue);
            }
            else {
                this.BindProperty(()=>GameElement._PlayerProperty, this.PlayerChanged);
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<GameElementController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        GameElementViewModel gameElement = ((GameElementViewModel)(viewModel));
        gameElement.Player = this._Player == null ? null : this._Player.ViewModelObject as PlayerElementViewModel;
    }
}

[DiagramInfoAttribute("SimpleBinding")]
public abstract class PlayerElementViewBase : ViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerElementViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public PlayerElementViewModel PlayerElement {
        get {
            return ((PlayerElementViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerElementController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
    }
}

public partial class GameView : GameElementViewBase {
}

public partial class PlayerElementView : PlayerElementViewBase {
}
