// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;
using UnityEngine;


[DiagramInfoAttribute("TargetingDemo")]
public abstract class TargetingGameElementViewBase : ViewBase {
    
    [UFToggleGroup("Player")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("PlayerChanged")]
    public bool _BindPlayer;
    
    [UFGroup("Player")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetPlayerTwoWayValue")]
    public bool _PlayerIsTwoWay;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _Player;
    
    public override System.Type ViewModelType {
        get {
            return typeof(TargetingGameElementViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public TargetingGameElementViewModel TargetingGameElement {
        get {
            return ((TargetingGameElementViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void PlayerChanged(string value) {
    }
    
    public virtual string GetPlayerTwoWayValue() {
        throw new System.NotImplementedException();
    }
    
    public override void Bind() {
        if (this._BindPlayer) {
            if (this._PlayerIsTwoWay) {
                this.BindProperty(()=>TargetingGameElement._PlayerProperty, this.PlayerChanged, this.GetPlayerTwoWayValue);
            }
            else {
                this.BindProperty(()=>TargetingGameElement._PlayerProperty, this.PlayerChanged);
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TargetingGameElementController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        TargetingGameElementViewModel targetingGameElement = ((TargetingGameElementViewModel)(viewModel));
        targetingGameElement.Player = this._Player;
    }
}

[DiagramInfoAttribute("TargetingDemo")]
public abstract class TargetableViewBase : ViewBase {
    
    [UFToggleGroup("Health")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("HealthChanged")]
    public bool _BindHealth;
    
    [UFGroup("Health")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetHealthTwoWayValue")]
    public bool _HealthIsTwoWay;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _Health;
    
    public override System.Type ViewModelType {
        get {
            return typeof(TargetableViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public TargetableViewModel Targetable {
        get {
            return ((TargetableViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void HealthChanged(string value) {
    }
    
    public virtual string GetHealthTwoWayValue() {
        throw new System.NotImplementedException();
    }
    
    public override void Bind() {
        if (this._BindHealth) {
            if (this._HealthIsTwoWay) {
                this.BindProperty(()=>Targetable._HealthProperty, this.HealthChanged, this.GetHealthTwoWayValue);
            }
            else {
                this.BindProperty(()=>Targetable._HealthProperty, this.HealthChanged);
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TargetableController>());
    }
    
    public virtual void ExecuteRegenerate() {
        this.ExecuteCommand(Targetable.Regenerate);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        TargetableViewModel targetable = ((TargetableViewModel)(viewModel));
        targetable.Health = this._Health;
    }
}

[DiagramInfoAttribute("TargetingDemo")]
public abstract class PlayerViewBase : ViewBase {
    
    [UFToggleGroup("CurrentTarget")]
    [UnityEngine.HideInInspector()]
    public bool _BindCurrentTarget;
    
    [UFGroup("CurrentTarget")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("GetCurrentTargetTwoWayValue")]
    public bool _CurrentTargetIsTwoWay;
    
    [UFGroup("CurrentTarget")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _CurrentTargetPrefab;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CurrentTarget;
    
    public override System.Type ViewModelType {
        get {
            return typeof(PlayerViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public PlayerViewModel Player {
        get {
            return ((PlayerViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void CurrentTargetChanged(TargetableViewModel value) {
        if (value == null) {
            Destroy(_CurrentTarget.gameObject);
        }
        if (_CurrentTargetPrefab == null) {
            this._CurrentTarget = ((TargetableViewBase)(this.InstantiateView(value)));
        }
        else {
            this._CurrentTarget = ((TargetableViewBase)(this.InstantiateView(this._CurrentTargetPrefab, value)));
        }
    }
    
    public virtual TargetableViewModel GetCurrentTargetTwoWayValue() {
        if (this._CurrentTarget == null || this._CurrentTarget.ViewModelObject == null) {
            return null;
        }
        return ((TargetableViewModel)(this._CurrentTarget.ViewModelObject));
    }
    
    public override void Bind() {
        if (this._BindCurrentTarget) {
            if (this._CurrentTargetIsTwoWay) {
                this.BindProperty(()=>Player._CurrentTargetProperty, this.CurrentTargetChanged, this.GetCurrentTargetTwoWayValue);
            }
            else {
                this.BindProperty(()=>Player._CurrentTargetProperty, this.CurrentTargetChanged);
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PlayerController>());
    }
    
    public virtual void ExecuteFire() {
        this.ExecuteCommand(Player.Fire);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        PlayerViewModel player = ((PlayerViewModel)(viewModel));
        player.CurrentTarget = this._CurrentTarget == null ? null : this._CurrentTarget.ViewModelObject as TargetableViewModel;
    }
}

[DiagramInfoAttribute("TargetingDemo")]
public abstract class CubeViewBase : TargetableViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(CubeViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public CubeViewModel Cube {
        get {
            return ((CubeViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CubeController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("TargetingDemo")]
public abstract class CylinderViewBase : TargetableViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(CylinderViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public CylinderViewModel Cylinder {
        get {
            return ((CylinderViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<CylinderController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class TargetingPlayerView : PlayerViewBase {
}
