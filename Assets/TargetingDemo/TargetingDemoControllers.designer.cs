// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;


public abstract class TargetingGameElementControllerBase : Controller {
    
    public virtual TargetingGameElementViewModel TargetingGameElement {
        get {
            return Container.Resolve<TargetingGameElementViewModel>();
        }
    }
    
    public abstract void InitializeTargetingGameElement(TargetingGameElementViewModel targetingGameElement);
    
    public override void WireCommands(ViewModel viewModel) {
    }
    
    public override ViewModel CreateEmpty() {
        return new TargetingGameElementViewModel();
    }
    
    public virtual TargetingGameElementViewModel CreateTargetingGameElement() {
        return ((TargetingGameElementViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeTargetingGameElement(((TargetingGameElementViewModel)(viewModel)));
    }
}

public abstract class TargetableControllerBase : Controller {
    
    public virtual TargetableViewModel Targetable {
        get {
            return Container.Resolve<TargetableViewModel>();
        }
    }
    
    public abstract void InitializeTargetable(TargetableViewModel targetable);
    
    public override void WireCommands(ViewModel viewModel) {
        var targetable = viewModel as TargetableViewModel;
        targetable.Regenerate = new Command(Regenerate);
    }
    
    public virtual TargetableViewModel CreateTargetable() {
        return ((TargetableViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeTargetable(((TargetableViewModel)(viewModel)));
    }
    
    public virtual void Regenerate() {
    }
}

public abstract class PlayerControllerBase : Controller {
    
    public virtual PlayerViewModel Player {
        get {
            return Container.Resolve<PlayerViewModel>();
        }
    }
    
    public abstract void InitializePlayer(PlayerViewModel player);
    
    public override void WireCommands(ViewModel viewModel) {
        var player = viewModel as PlayerViewModel;
        player.Fire = new Command(Fire);
    }
    
    public override ViewModel CreateEmpty() {
        return new PlayerViewModel();
    }
    
    public virtual PlayerViewModel CreatePlayer() {
        return ((PlayerViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializePlayer(((PlayerViewModel)(viewModel)));
    }
    
    public virtual void Fire() {
    }
}

public abstract class CubeControllerBase : TargetableController {
    
    public virtual CubeViewModel Cube {
        get {
            return Container.Resolve<CubeViewModel>();
        }
    }
    
    public abstract void InitializeCube(CubeViewModel cube);
    
    public override void WireCommands(ViewModel viewModel) {
        base.WireCommands(viewModel);
    }
    
    public override ViewModel CreateEmpty() {
        return new CubeViewModel();
    }
    
    public virtual CubeViewModel CreateCube() {
        return ((CubeViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeCube(((CubeViewModel)(viewModel)));
    }
}

public abstract class CylinderControllerBase : TargetableController {
    
    public virtual CylinderViewModel Cylinder {
        get {
            return Container.Resolve<CylinderViewModel>();
        }
    }
    
    public abstract void InitializeCylinder(CylinderViewModel cylinder);
    
    public override void WireCommands(ViewModel viewModel) {
        base.WireCommands(viewModel);
    }
    
    public override ViewModel CreateEmpty() {
        return new CylinderViewModel();
    }
    
    public virtual CylinderViewModel CreateCylinder() {
        return ((CylinderViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeCylinder(((CylinderViewModel)(viewModel)));
    }
}

[System.SerializableAttribute()]
public sealed partial class TargetingSceneManagerSettings {
    
    public string[] _Scenes;
}

public class TargetingSceneManagerBase : SceneManager {
    
    public TargetingSceneManagerSettings _TargetingSceneManagerSettings = new TargetingSceneManagerSettings();
    
    public PlayerController PlayerController { get; set; }
    public CubeController CubeController { get; set; }
    public CylinderController CylinderController { get; set; }
    public override void Setup() {
        base.Setup();
        this.PlayerController = new PlayerController();
        this.Container.RegisterInstance(this.PlayerController, false);
        this.CubeController = new CubeController();
        this.Container.RegisterInstance(this.CubeController, false);
        this.CylinderController = new CylinderController();
        this.Container.RegisterInstance(this.CylinderController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<PlayerViewModel>(PlayerController.CreateEmpty() as PlayerViewModel, false);
    }
}
