// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace PlaymakerExample.PlaymakerActions {
    using System;
    using System.Collections;
    using System.Linq;
    using UnityEngine;
    using HutongGames.PlayMaker;
    
    
    public class PlaymakerElementStateCompare : FsmStateAction {
        
        public HutongGames.PlayMaker.FsmString _State;
        
        public HutongGames.PlayMaker.FsmEvent _IdleEvent = new HutongGames.PlayMaker.FsmEvent("Idle");
        
        public HutongGames.PlayMaker.FsmEvent _UpgradingEvent = new HutongGames.PlayMaker.FsmEvent("Upgrading");
        
        public HutongGames.PlayMaker.FsmEvent _DeadEvent = new HutongGames.PlayMaker.FsmEvent("Dead");
        
        public override void OnUpdate() {
            base.OnUpdate();
            if (_State.Value == PlaymakerElementState.Idle.ToString()) {
                Fsm.Event(_IdleEvent);
                return;
            }
            if (_State.Value == PlaymakerElementState.Upgrading.ToString()) {
                Fsm.Event(_UpgradingEvent);
                return;
            }
            if (_State.Value == PlaymakerElementState.Dead.ToString()) {
                Fsm.Event(_DeadEvent);
                return;
            }
        }
    }
    
    public class ExecutePlaymakerElementUpgrade : HutongGames.PlayMaker.FsmStateAction {
        
        public ViewBase _view;
        
        public virtual PlaymakerElementViewModel PlaymakerElement {
            get {
                return ((PlaymakerElementViewModel)(this.View.ViewModelObject));
            }
        }
        
        public virtual ViewBase View {
            get {
                if ((this._view == null)) {
                    this._view = this.Owner.GetComponent<ViewBase>();
                }
                return this._view;
            }
        }
        
        public virtual void ExecuteUpgrade() {
            this.View.ExecuteCommand(PlaymakerElement.Upgrade);
        }
        
        public override void OnEnter() {
            base.OnEnter();;
            this.ExecuteUpgrade();
            Finish();
        }
    }
    
    public class ExecutePlaymakerElementKill : HutongGames.PlayMaker.FsmStateAction {
        
        public ViewBase _view;
        
        public virtual PlaymakerElementViewModel PlaymakerElement {
            get {
                return ((PlaymakerElementViewModel)(this.View.ViewModelObject));
            }
        }
        
        public virtual ViewBase View {
            get {
                if ((this._view == null)) {
                    this._view = this.Owner.GetComponent<ViewBase>();
                }
                return this._view;
            }
        }
        
        public virtual void ExecuteKill() {
            this.View.ExecuteCommand(PlaymakerElement.Kill);
        }
        
        public override void OnEnter() {
            base.OnEnter();;
            this.ExecuteKill();
            Finish();
        }
    }
    
    public class ExecutePlaymakerElementTick : HutongGames.PlayMaker.FsmStateAction {
        
        public ViewBase _view;
        
        public virtual PlaymakerElementViewModel PlaymakerElement {
            get {
                return ((PlaymakerElementViewModel)(this.View.ViewModelObject));
            }
        }
        
        public virtual ViewBase View {
            get {
                if ((this._view == null)) {
                    this._view = this.Owner.GetComponent<ViewBase>();
                }
                return this._view;
            }
        }
        
        public virtual void ExecuteTick() {
            this.View.ExecuteCommand(PlaymakerElement.Tick);
        }
        
        public override void OnEnter() {
            base.OnEnter();;
            this.ExecuteTick();
            Finish();
        }
    }
}
