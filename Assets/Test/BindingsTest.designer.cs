// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;


[DiagramInfoAttribute("BindingsTest")]
public partial class GameRootElementViewModel : ViewModel {
    
    private UnityEngine.Vector3 _position;
    
    private UnityEngine.Vector3 _localPosition;
    
    private UnityEngine.Quaternion _rotation;
    
    private UnityEngine.Quaternion _localRotation;
    
    private UnityEngine.Vector3 _localScale;
    
    private bool _enabled;
    
    public readonly P<System.String> _TestPropertyProperty;
    
    public readonly P<GameSubElementViewModel> _TestVMPropertyProperty;
    
    public readonly ModelCollection<System.String> _TestCollectionProperty = new ModelCollection<string>();
    
    public readonly ModelCollection<GameSubElementViewModel> _TestVMCollectionProperty = new ModelCollection<GameSubElementViewModel>();
    
    public GameRootElementViewModel() : 
            base() {
        _TestPropertyProperty = new P<string>(this, "TestProperty");
        _TestVMPropertyProperty = new P<GameSubElementViewModel>(this, "TestVMProperty");
    }
    
    public GameRootElementViewModel(GameRootElementControllerBase controller) : 
            this() {
        this.Controller = controller;
    }
    
    public virtual UnityEngine.Vector3 TransformPosition {
        get {
            return this._position;
        }
        set {
            _position = value;
            Dirty = true;
        }
    }
    
    public virtual UnityEngine.Vector3 TransformLocalPosition {
        get {
            return this._localPosition;
        }
        set {
            _localPosition = value;
            Dirty = true;
        }
    }
    
    public virtual UnityEngine.Quaternion TransformRotation {
        get {
            return this._rotation;
        }
        set {
            _rotation = value;
            Dirty = true;
        }
    }
    
    public virtual UnityEngine.Quaternion TransformLocalRotation {
        get {
            return this._localRotation;
        }
        set {
            _localRotation = value;
            Dirty = true;
        }
    }
    
    public virtual UnityEngine.Vector3 TransformLocalScale {
        get {
            return this._localScale;
        }
        set {
            _localScale = value;
            Dirty = true;
        }
    }
    
    public virtual bool ColliderEnabled {
        get {
            return this._enabled;
        }
        set {
            _enabled = value;
            Dirty = true;
        }
    }
    
    public virtual string TestProperty {
        get {
            return _TestPropertyProperty.Value;
        }
        set {
            _TestPropertyProperty.Value = value;
        }
    }
    
    public virtual GameSubElementViewModel TestVMProperty {
        get {
            return _TestVMPropertyProperty.Value;
        }
        set {
            _TestVMPropertyProperty.Value = value;
        }
    }
    
    public virtual System.Collections.Generic.ICollection<string> TestCollection {
        get {
            return _TestCollectionProperty;
        }
        set {
            _TestCollectionProperty.Value = value.ToList();
        }
    }
    
    public virtual System.Collections.Generic.ICollection<GameSubElementViewModel> TestVMCollection {
        get {
            return _TestVMCollectionProperty;
        }
        set {
            _TestVMCollectionProperty.Value = value.ToList();
        }
    }
    
    protected override void WireCommands(Controller controller) {
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
		stream.SerializeString("TestProperty", this.TestProperty);
		stream.SerializeObject("TestVMProperty", this.TestVMProperty);
		stream.SerializeVector3("TransformPosition", this.TransformPosition);
		stream.SerializeVector3("TransformLocalPosition", this.TransformLocalPosition);
		stream.SerializeQuaternion("TransformRotation", this.TransformRotation);
		stream.SerializeQuaternion("TransformLocalRotation", this.TransformLocalRotation);
		stream.SerializeVector3("TransformLocalScale", this.TransformLocalScale);
		stream.SerializeBool("ColliderEnabled", this.ColliderEnabled);
		stream.SerializeArray("TestVMCollection", this.TestVMCollection);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
		this.TestProperty = stream.DeserializeString("TestProperty");
		this.TestVMProperty = stream.DeserializeObject<GameSubElementViewModel>("TestVMProperty");
		this.TransformPosition = stream.DeserializeVector3("TransformPosition");
		this.TransformLocalPosition = stream.DeserializeVector3("TransformLocalPosition");
		this.TransformRotation = stream.DeserializeQuaternion("TransformRotation");
		this.TransformLocalRotation = stream.DeserializeQuaternion("TransformLocalRotation");
		this.TransformLocalScale = stream.DeserializeVector3("TransformLocalScale");
		this.ColliderEnabled = stream.DeserializeBool("ColliderEnabled");
		this.TestVMCollection = stream.DeserializeObjectArray<GameSubElementViewModel>("TestVMCollection").ToList();
    }
}

[DiagramInfoAttribute("BindingsTest")]
public partial class GameSubElementViewModel : ViewModel {
    
    public GameSubElementViewModel() : 
            base() {
    }
    
    public GameSubElementViewModel(GameSubElementControllerBase controller) : 
            this() {
        this.Controller = controller;
    }
    
    protected override void WireCommands(Controller controller) {
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
}

[DiagramInfoAttribute("BindingsTest")]
public partial class GameSubDerivedElementViewModel : GameSubElementViewModel {
    
    public GameSubDerivedElementViewModel() : 
            base() {
    }
    
    public GameSubDerivedElementViewModel(GameSubDerivedElementControllerBase controller) : 
            this() {
        this.Controller = controller;
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
    }
}

[DiagramInfoAttribute("BindingsTest")]
public partial class Game2RootElementViewModel : GameRootElementViewModel {
    
    public readonly P<System.String> _DerviedTestPropertyProperty;
    
    public Game2RootElementViewModel() : 
            base() {
        _DerviedTestPropertyProperty = new P<string>(this, "DerviedTestProperty");
    }
    
    public Game2RootElementViewModel(Game2RootElementControllerBase controller) : 
            this() {
        this.Controller = controller;
    }
    
    public virtual string DerviedTestProperty {
        get {
            return _DerviedTestPropertyProperty.Value;
        }
        set {
            _DerviedTestPropertyProperty.Value = value;
        }
    }
    
    protected override void WireCommands(Controller controller) {
        base.WireCommands(controller);
    }
    
    public override void Write(ISerializerStream stream) {
		base.Write(stream);
		stream.SerializeString("DerviedTestProperty", this.DerviedTestProperty);
    }
    
    public override void Read(ISerializerStream stream) {
		base.Read(stream);
		this.DerviedTestProperty = stream.DeserializeString("DerviedTestProperty");
    }
}
