using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Invert.uFrame.Editor;
using Microsoft.CSharp;
using UnityEngine;

namespace Invert.uFrame.Code.Bindings
{
    public abstract class BindingGenerator : IBindingGenerator
    {
        public virtual string BindingConditionFieldName
        {
            get { return "_Bind" + Item.Name; }
        }
        public IViewModelItem Item { get; set; }

        public IDiagramNode RelatedNode
        {
            get { return Item.RelatedNode(); }
        }

        public ElementData RelatedElement
        {
            get { return RelatedNode as ElementData; }
        }
        public ElementData ElementData
        {
            get { return Item.Node as ElementData; }
        }

        public IElementDesignerData DiagramData
        {
            get { return RelatedElement.Data; }
        }
        public bool GenerateDefaultImplementation { get; set; }

        public CodeMemberField CreateBindingField(string typeFullName, string propertyName, string name, bool keepHidden = false)
        {
            var memberField =
                new CodeMemberField(
                    typeFullName,
                    "_" + propertyName + name) { Attributes = MemberAttributes.Public };
            if (!keepHidden)
            {
                memberField.CustomAttributes.Add(new CodeAttributeDeclaration(new CodeTypeReference(typeof(UFGroup)),
                    new CodeAttributeArgument(new CodePrimitiveExpression(propertyName))));
            }

            memberField.CustomAttributes.Add(new CodeAttributeDeclaration(new CodeTypeReference(typeof(HideInInspector))));
            return memberField;
        }

        public virtual string GetMethodName(IViewModelItem itemData)
        {
            return string.Empty;
        }

        public abstract string MethodName { get; }

        public abstract bool IsApplicable { get; }
        public bool IsOverride { get; set; }

        public virtual void CreateMembers(CodeTypeMemberCollection collection)
        {

        }

        public abstract void CreateBindingStatement(CodeTypeMemberCollection collection, CodeConditionStatement bindingCondition);
        
        public override string ToString()
        {
            var cp = new CSharpCodeProvider();
            var sb = new StringBuilder();
            var strWriter = new StringWriter(sb);
            var collection = new CodeTypeMemberCollection();
            CreateMembers(collection);

            // ------------------------------------------------------------------------------
            //  <autogenerated>
            //      This code was generated by a tool.
            //      Mono Runtime Version: 2.0.50727.1433
            // 
            //      Changes to this file may cause incorrect behavior and will be lost if 
            //      the code is regenerated.
            //  </autogenerated>
            // ------------------------------------------------------------------------------



            //public class DUMMY {

            //var ctm = member as CodeTypeMember;
            //if (ctm == null) continue;
            var type = new CodeTypeDeclaration("DUMMY");
            type.Members.AddRange(collection);
            var ccu = new CodeCompileUnit();
            var ns = new CodeNamespace();
            ns.Types.Add(type);
            ccu.Namespaces.Add(ns);

            cp.GenerateCodeFromCompileUnit(ccu, strWriter, new CodeGeneratorOptions());
            //cp.GenerateCodeFromMember(ctm,strWriter,new CodeGeneratorOptions()
            //{

            //});

            var adjusted =
                sb.ToString()
                    .Split(new string[] { Environment.NewLine }, StringSplitOptions.None)
                    .Skip(14)
                    .Reverse()
                    .Skip(2)
                    .Reverse().ToArray();

            return string.Join("\r\n", adjusted);
        }

        public virtual CodeMemberMethod CreateMethodSignature(CodeTypeReference returnType = null, params CodeParameterDeclarationExpression[] vars)
        {
            return CreateMethodSignature(returnType, true, vars);
        }

        public virtual CodeMemberMethod CreateMethodSignature(CodeTypeReference returnType = null, bool callBase = true, params CodeParameterDeclarationExpression[] vars)
        {
            return CreateMethodSignature(returnType, MemberAttributes.Public, callBase, vars);
        }

        public virtual CodeMemberMethod CreateMethodSignature(CodeTypeReference returnType = null, MemberAttributes attribute = MemberAttributes.Public, bool callBase = true, params CodeParameterDeclarationExpression[] vars)
        {
            var createHandlerMethod = new CodeMemberMethod()
            {
                Attributes = MemberAttributes.Public,
                Name = MethodName,
                ReturnType = returnType ?? new CodeTypeReference(typeof(void))
            };
            foreach (var item in vars)
            {
                createHandlerMethod.Parameters.Add(item);
            }
            if (IsOverride)
            {
                createHandlerMethod.Attributes |= MemberAttributes.Override;

                var baseInvoker = new CodeMethodInvokeExpression(new CodeBaseReferenceExpression(),
                    createHandlerMethod.Name);
                foreach (var item in vars)
                {
                    baseInvoker.Parameters.Add(new CodeVariableReferenceExpression(item.Name));
                }
                if (returnType != null)
                {
                    createHandlerMethod.Statements.Add(new CodeMethodReturnStatement(baseInvoker));
                }
                else
                {
                    createHandlerMethod.Statements.Add(baseInvoker);
                }

            }
            return createHandlerMethod;
        }
    }

    public class PropertyBindingGenerator : BindingGenerator
    {
        public ViewModelPropertyData PropertyData
        {
            get { return Item as ViewModelPropertyData; }
        }

        public override string MethodName
        {
            get { return string.Format("{0}Changed", Item.Name); }
        }

        public override bool IsApplicable
        {
            get { return PropertyData != null; }
        }

        public override void CreateBindingStatement(CodeTypeMemberCollection collection, CodeConditionStatement bindingCondition)
        {
            var memberInvoke = new CodeMethodInvokeExpression(new CodeThisReferenceExpression(), "BindProperty");
            memberInvoke.Parameters.Add(
                     new CodeSnippetExpression(string.Format("()=>{0}.{1}", ElementData.Name, PropertyData.FieldName)));
            memberInvoke.Parameters.Add(new CodeMethodReferenceExpression(new CodeThisReferenceExpression(), PropertyData.NameAsChangedMethod));
            bindingCondition.TrueStatements.Add(memberInvoke);
        }

        public override void CreateMembers(CodeTypeMemberCollection collection)
        {


            //if (!asTwoWay)
            //{
            var setterMethod = CreateMethodSignature(null, new CodeParameterDeclarationExpression(
                new CodeTypeReference(RelatedElement == null
                    ? PropertyData.RelatedTypeName
                    : RelatedElement.NameAsViewModel), "value"));

            if (RelatedElement == null)
            {
                //foreach (var viewBindingExtender in BindingExtenders)
                //{
                //    viewBindingExtender.ExtendPropertyBinding(data, setterMethod.Statements, propertyData, null);
                //}
            }
            else
            {
                var viewPrefabField = CreateBindingField(typeof(GameObject).FullName, PropertyData.Name,
                    "Prefab");
                collection.Add(viewPrefabField);

                setterMethod.Statements.Add(
                    new CodeConditionStatement(
                        new CodeSnippetExpression(string.Format(
                            "value == null && {0} != null && {0}.gameObject != null", PropertyData.ViewFieldName)),
                        new CodeExpressionStatement(
                            new CodeMethodInvokeExpression(null,
                                "Destroy",
                                new CodeSnippetExpression(string.Format("{0}.gameObject", PropertyData.ViewFieldName))))));

                var prefabSetCondition =
                    new CodeConditionStatement(
                        new CodeSnippetExpression(String.Format((string)"{0} == null ", (object)viewPrefabField.Name)));

                prefabSetCondition.TrueStatements.Add(new CodeAssignStatement(
                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), PropertyData.ViewFieldName),
                    new CodeCastExpression(new CodeTypeReference(RelatedElement.NameAsViewBase),
                        new CodeMethodInvokeExpression(new CodeThisReferenceExpression(), "InstantiateView",
                            new CodeVariableReferenceExpression("value"))
                        )));

                prefabSetCondition.FalseStatements.Add(new CodeAssignStatement(
                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), PropertyData.ViewFieldName),
                    new CodeCastExpression(new CodeTypeReference(RelatedElement.NameAsViewBase),
                        new CodeMethodInvokeExpression(new CodeThisReferenceExpression(), "InstantiateView",
                            new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), viewPrefabField.Name),
                            new CodeVariableReferenceExpression("value"))
                        )));
                setterMethod.Statements.Add(prefabSetCondition);
            }

            collection.Add(setterMethod);
        }

    }

    public abstract class CollectionBindingGenerator : BindingGenerator
    {

        public string NameAsListField
        {
            get { return string.Format("_{0}List", Item.Name); }
        }
        public string NameAsSceneFirstField
        {
            get { return string.Format("_{0}SceneFirst", Item.Name); }
        }
        public string NameAsContainerField
        {
            get { return string.Format("_{0}Container", Item.Name); }
        }
        public override bool IsApplicable
        {
            get { return CollectionProperty != null; }
        }

        public ViewModelCollectionData CollectionProperty
        {
            get
            {
                return Item as ViewModelCollectionData;
            }
        }

        public bool HasField(CodeTypeMemberCollection collection, string name)
        {
            return collection.OfType<CodeMemberField>().Any(item => item.Name == name);
        }
        public override void CreateMembers(CodeTypeMemberCollection collection)
        {
            base.CreateMembers(collection);
           

        }

        public override void CreateBindingStatement(CodeTypeMemberCollection collection, CodeConditionStatement bindingCondition)
        {
            if (bindingCondition.TrueStatements.Count > 0) return;
            if (RelatedElement != null && GenerateDefaultImplementation)
            {
                if (!HasField(collection, NameAsListField))
                {
                    var listField = CreateBindingField(typeof(List<ViewModel>).FullName.Replace("ViewModel", RelatedElement.NameAsViewBase), CollectionProperty.Name, "List", true);
                    collection.Add(listField);
                }

                if (!HasField(collection, NameAsSceneFirstField))
                {
                    var sceneFirstField = CreateBindingField(typeof(bool).FullName, CollectionProperty.Name,
                        "SceneFirst");
                    collection.Add(sceneFirstField);
                }
                if (!HasField(collection, NameAsContainerField))
                {
                    var containerField = CreateBindingField(typeof(Transform).FullName, CollectionProperty.Name,
                        "Container");
                    collection.Add(containerField);
                }
            }
            if (RelatedElement != null && GenerateDefaultImplementation)
            {
                bindingCondition.TrueStatements.Add(
                    new CodeSnippetExpression(string.Format("var binding = this.BindToViewCollection(() => {0}.{1})", ElementData.Name, CollectionProperty.FieldName)));

                var containerNullCondition =
                    new CodeConditionStatement(
                        new CodeBinaryOperatorExpression(new CodeVariableReferenceExpression(NameAsContainerField),
                            CodeBinaryOperatorType.ValueEquality, new CodeSnippetExpression("null")));

                containerNullCondition.FalseStatements.Add(new CodeSnippetExpression(string.Format("binding.SetParent({0})", NameAsContainerField)));
                bindingCondition.TrueStatements.Add(containerNullCondition);

                var sceneFirstCondition =
                    new CodeConditionStatement(
                        new CodeVariableReferenceExpression(NameAsSceneFirstField));

                sceneFirstCondition.TrueStatements.Add(new CodeSnippetExpression("binding.ViewFirst()"));
                bindingCondition.TrueStatements.Add(sceneFirstCondition);
            }
            else
            {
                bindingCondition.TrueStatements.Add(
                    new CodeSnippetExpression(string.Format("var binding = this.BindCollection(() => {0}.{1})", ElementData.Name,
                        CollectionProperty.FieldName)));
            }
        }

        public string VarTypeName
        {
            get { return RelatedElement == null ? CollectionProperty.RelatedTypeName : RelatedElement.NameAsViewModel; }
        }

        public string ParameterTypeName
        {
            get { return RelatedElement == null ? CollectionProperty.RelatedTypeName : RelatedElement.NameAsViewBase; }
        }

        public virtual string VarName
        {
            get { return "value"; }
        }

    }
    public class CollectionItemAddedBindingGenerator : CollectionBindingGenerator
    {
        public override string VarName
        {
            get { return "item"; }
        }

        public override string MethodName
        {
            get { return string.Format("{0}Added", Item.Name); }
        }

        public override void CreateBindingStatement(CodeTypeMemberCollection collection, CodeConditionStatement bindingCondition)
        {
            base.CreateBindingStatement(collection, bindingCondition);

            if (RelatedElement != null)
            {
                bindingCondition.TrueStatements.Add(
                    new CodeSnippetExpression(string.Format("binding.SetAddHandler(item=>{0}(item as {1}))",
                        MethodName, RelatedElement.NameAsViewBase)));
            }
            else
            {
                bindingCondition.TrueStatements.Add(
                    new CodeSnippetExpression(string.Format("binding.SetAddHandler({0})",
                        MethodName)));
            }
        }

        public override void CreateMembers(CodeTypeMemberCollection collection)
        {
            base.CreateMembers(collection);
            var addHandlerMethod = CreateMethodSignature(null, new CodeParameterDeclarationExpression(ParameterTypeName, VarName));
            if (GenerateDefaultImplementation)
            {
                addHandlerMethod.Statements.Add(new CodeMethodInvokeExpression(
                    new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), NameAsListField), "Add",
                    new CodeVariableReferenceExpression("item")));
            }

            collection.Add(addHandlerMethod);
        }
    }
    public class CollectionItemRemovedBindingGenerator : CollectionBindingGenerator
    {
        public override string MethodName
        {
            get { return string.Format("{0}Removed", Item.Name); }
        }

        public override void CreateBindingStatement(CodeTypeMemberCollection collection, CodeConditionStatement bindingCondition)
        {
            base.CreateBindingStatement(collection, bindingCondition);
            if (RelatedElement != null)
            {
                bindingCondition.TrueStatements.Add(
                               new CodeSnippetExpression(string.Format("binding.SetRemoveHandler(item=>{0}(item as {1}))",
                                   MethodName, RelatedElement.NameAsViewBase)));
            }
            else
            {

                bindingCondition.TrueStatements.Add(
                    new CodeSnippetExpression(string.Format("binding.SetRemoveHandler({0})",
                        MethodName)));
            }

        }

        public override string VarName
        {
            get { return "item"; }
        }

        public override void CreateMembers(CodeTypeMemberCollection collection)
        {
            base.CreateMembers(collection);
            //decl.Members.Add(addHandlerMethod);
            var removeHandlerMethod = CreateMethodSignature(null,
                new CodeParameterDeclarationExpression(ParameterTypeName, VarName));

            if (GenerateDefaultImplementation)
            {
                if (CollectionProperty != null && RelatedElement != null)
                {
                    removeHandlerMethod.Statements.Add(new CodeMethodInvokeExpression(
                        new CodeFieldReferenceExpression(new CodeThisReferenceExpression(), NameAsListField), "Remove",
                        new CodeVariableReferenceExpression("item")));

                    removeHandlerMethod.Statements.Add(new CodeSnippetExpression("if (item != null && item.gameObject != null) UnityEngine.Object.Destroy(item.gameObject)"));
                }
            }
            collection.Add(removeHandlerMethod);
        }
    }
    public class CollectionItemCreateBindingGenerator : CollectionBindingGenerator
    {
        public override bool IsApplicable
        {
            get { return base.IsApplicable && RelatedElement != null; }
        }
        public override string MethodName
        {
            get { return string.Format("Create{0}View", Item.Name); }
        }
        public override void CreateBindingStatement(CodeTypeMemberCollection collection, CodeConditionStatement bindingCondition)
        {
            base.CreateBindingStatement(collection, bindingCondition);

            bindingCondition.TrueStatements.Add(
                  new CodeSnippetExpression(
                      string.Format("binding.SetCreateHandler(viewModel=>{{ return {0}(viewModel as {1}); }}); ",
                          MethodName, RelatedElement.NameAsViewModel)));
        }

        public override void CreateMembers(CodeTypeMemberCollection collection)
        {
            var createHandlerMethod = CreateMethodSignature(new CodeTypeReference(typeof(ViewBase)),
                new CodeParameterDeclarationExpression(VarTypeName, VarName));

            if (GenerateDefaultImplementation)
            {
                createHandlerMethod.Statements.Add(
                    new CodeMethodReturnStatement(new CodeMethodInvokeExpression(new CodeThisReferenceExpression(),
                        "InstantiateView", new CodeVariableReferenceExpression(VarName))));
            }
            else
            {
                createHandlerMethod.Statements.Add(
                   new CodeMethodReturnStatement(new CodeSnippetExpression("null")));
            }
            collection.Add(createHandlerMethod);
        }
    }
}