// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;


public abstract class MartifactsGameControllerBase : Controller {
    
    [Inject] public RoverController RoverController {get;set;}
    [Inject] public TileController TileController {get;set;}
    [Inject] public ArtifactController ArtifactController {get;set;}
    public virtual MartifactsGameViewModel MartifactsGame {
        get {
            return Container.Resolve<MartifactsGameViewModel>();
        }
    }
    
    public abstract void InitializeMartifactsGame(MartifactsGameViewModel martifactsGame);
    
    protected override ViewModel CreateEmpty() {
        return new MartifactsGameViewModel();
    }
    
    public virtual MartifactsGameViewModel CreateMartifactsGame() {
        return ((MartifactsGameViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeMartifactsGame(((MartifactsGameViewModel)(viewModel)));
    }
    
    public virtual void Retry() {
    }
}

public abstract class TileControllerBase : TiledItemController {
    
    [Inject] public MartifactsGameController MartifactsGameController {get;set;}
    public abstract void InitializeTile(TileViewModel tile);
    
    public virtual TileViewModel CreateTile() {
        return ((TileViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeTile(((TileViewModel)(viewModel)));
    }
}

public abstract class RoverControllerBase : Controller {
    
    [Inject] public MartifactsGameController MartifactsGameController {get;set;}
    [Inject] public ArtifactController ArtifactController {get;set;}
    public virtual RoverViewModel Rover {
        get {
            return Container.Resolve<RoverViewModel>();
        }
    }
    
    public abstract void InitializeRover(RoverViewModel rover);
    
    protected override ViewModel CreateEmpty() {
        return new RoverViewModel();
    }
    
    public virtual RoverViewModel CreateRover() {
        return ((RoverViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeRover(((RoverViewModel)(viewModel)));
    }
    
    public virtual void MoveLeft() {
    }
    
    public virtual void MoveRight() {
    }
    
    public virtual void MoveForward() {
    }
    
    public virtual void MoveBackward() {
    }
    
    public virtual System.Collections.IEnumerator ShootFlare() {
        yield break;
    }
    
    public virtual System.Collections.IEnumerator Drill() {
        yield break;
    }
    
    public virtual System.Collections.IEnumerator Sonar() {
        yield break;
    }
    
    public virtual void ReachedDestination() {
    }
}

public abstract class RockyTileControllerBase : TileController {
    
    public abstract void InitializeRockyTile(RockyTileViewModel rockyTile);
    
    protected override ViewModel CreateEmpty() {
        return new RockyTileViewModel();
    }
    
    public virtual RockyTileViewModel CreateRockyTile() {
        return ((RockyTileViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeRockyTile(((RockyTileViewModel)(viewModel)));
    }
}

public abstract class ResourceTileControllerBase : TileController {
    
    public abstract void InitializeResourceTile(ResourceTileViewModel resourceTile);
    
    protected override ViewModel CreateEmpty() {
        return new ResourceTileViewModel();
    }
    
    public virtual ResourceTileViewModel CreateResourceTile() {
        return ((ResourceTileViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeResourceTile(((ResourceTileViewModel)(viewModel)));
    }
}

public abstract class FlatTileControllerBase : TileController {
    
    [Inject] public ArtifactController ArtifactController {get;set;}
    public abstract void InitializeFlatTile(FlatTileViewModel flatTile);
    
    protected override ViewModel CreateEmpty() {
        return new FlatTileViewModel();
    }
    
    public virtual FlatTileViewModel CreateFlatTile() {
        return ((FlatTileViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeFlatTile(((FlatTileViewModel)(viewModel)));
    }
}

public abstract class ArtifactControllerBase : TiledItemController {
    
    [Inject] public MartifactsGameController MartifactsGameController {get;set;}
    [Inject] public RoverController RoverController {get;set;}
    [Inject] public FlatTileController FlatTileController {get;set;}
    public abstract void InitializeArtifact(ArtifactViewModel artifact);
    
    protected override ViewModel CreateEmpty() {
        return new ArtifactViewModel();
    }
    
    public virtual ArtifactViewModel CreateArtifact() {
        return ((ArtifactViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        base.Initialize(viewModel);
        this.InitializeArtifact(((ArtifactViewModel)(viewModel)));
    }
}

public abstract class TiledItemControllerBase : Controller {
    
    public virtual TiledItemViewModel TiledItem {
        get {
            return Container.Resolve<TiledItemViewModel>();
        }
    }
    
    public abstract void InitializeTiledItem(TiledItemViewModel tiledItem);
    
    public virtual TiledItemViewModel CreateTiledItem() {
        return ((TiledItemViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeTiledItem(((TiledItemViewModel)(viewModel)));
    }
}

[System.SerializableAttribute()]
public sealed partial class MainMenuSettings {
    
    public string[] _Scenes;
}

public class MainMenuBase : SceneManager {
    
    public MainMenuSettings _MainMenuSettings = new MainMenuSettings();
    
    public override void Setup() {
        base.Setup();
        this.Container.InjectAll();
    }
}

[System.SerializableAttribute()]
public sealed partial class MartifactsGameSceneSettings {
    
    public string[] _Scenes;
}

public class MartifactsGameSceneBase : SceneManager {
    
    public MartifactsGameSceneSettings _MartifactsGameSceneSettings = new MartifactsGameSceneSettings();
    
    public MartifactsGameController MartifactsGameController { get; set; }
    public RoverController RoverController { get; set; }
    public RockyTileController RockyTileController { get; set; }
    public ResourceTileController ResourceTileController { get; set; }
    public FlatTileController FlatTileController { get; set; }
    public ArtifactController ArtifactController { get; set; }
    public override void Setup() {
        base.Setup();
        this.MartifactsGameController = new MartifactsGameController() { Container = Container, Context = Context };
        this.Container.RegisterInstance(this.MartifactsGameController, false);
        this.RoverController = new RoverController() { Container = Container, Context = Context };
        this.Container.RegisterInstance(this.RoverController, false);
        this.RockyTileController = new RockyTileController() { Container = Container, Context = Context };
        this.Container.RegisterInstance(this.RockyTileController, false);
        this.ResourceTileController = new ResourceTileController() { Container = Container, Context = Context };
        this.Container.RegisterInstance(this.ResourceTileController, false);
        this.FlatTileController = new FlatTileController() { Container = Container, Context = Context };
        this.Container.RegisterInstance(this.FlatTileController, false);
        this.ArtifactController = new ArtifactController() { Container = Container, Context = Context };
        this.Container.RegisterInstance(this.ArtifactController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<MartifactsGameViewModel>(SetupViewModel<MartifactsGameViewModel>(MartifactsGameController, "MartifactsGame"));
        Container.RegisterInstance<RoverViewModel>(SetupViewModel<RoverViewModel>(RoverController, "Rover"));
    }
}
