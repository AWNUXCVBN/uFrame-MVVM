// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;
using UnityEngine;


[DiagramInfoAttribute("Martifacts")]
public abstract class MartifactsGameViewBase : ViewBase {
    
    [UFToggleGroup("Rover")]
    [UnityEngine.HideInInspector()]
    public bool _BindRover;
    
    [UFGroup("Rover")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _RoverPrefab;
    
    [UFToggleGroup("TileLeft")]
    [UnityEngine.HideInInspector()]
    public bool _BindTileLeft;
    
    [UFGroup("TileLeft")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _TileLeftPrefab;
    
    [UFToggleGroup("TileRight")]
    [UnityEngine.HideInInspector()]
    public bool _BindTileRight;
    
    [UFGroup("TileRight")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _TileRightPrefab;
    
    [UFToggleGroup("TileBack")]
    [UnityEngine.HideInInspector()]
    public bool _BindTileBack;
    
    [UFGroup("TileBack")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _TileBackPrefab;
    
    [UFToggleGroup("TileFront")]
    [UnityEngine.HideInInspector()]
    public bool _BindTileFront;
    
    [UFGroup("TileFront")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _TileFrontPrefab;
    
    [UFToggleGroup("TileFrontRight")]
    [UnityEngine.HideInInspector()]
    public bool _BindTileFrontRight;
    
    [UFGroup("TileFrontRight")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _TileFrontRightPrefab;
    
    [UFToggleGroup("TileFrontLeft")]
    [UnityEngine.HideInInspector()]
    public bool _BindTileFrontLeft;
    
    [UFGroup("TileFrontLeft")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _TileFrontLeftPrefab;
    
    [UFToggleGroup("TileBackRight")]
    [UnityEngine.HideInInspector()]
    public bool _BindTileBackRight;
    
    [UFGroup("TileBackRight")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _TileBackRightPrefab;
    
    [UFToggleGroup("TileBackLeft")]
    [UnityEngine.HideInInspector()]
    public bool _BindTileBackLeft;
    
    [UFGroup("TileBackLeft")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _TileBackLeftPrefab;
    
    [UFToggleGroup("CurrentTile")]
    [UnityEngine.HideInInspector()]
    public bool _BindCurrentTile;
    
    [UFGroup("CurrentTile")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _CurrentTilePrefab;
    
    [UFToggleGroup("Message")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("MessageChanged")]
    public bool _BindMessage;
    
    [UFToggleGroup("MessageTitle")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("MessageTitleChanged")]
    public bool _BindMessageTitle;
    
    [UFToggleGroup("State")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("StateChanged")]
    public bool _BindState;
    
    [UFToggleGroup("CompleteTile")]
    [UnityEngine.HideInInspector()]
    public bool _BindCompleteTile;
    
    [UFGroup("CompleteTile")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _CompleteTilePrefab;
    
    [UFToggleGroup("MoveCount")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("MoveCountChanged")]
    public bool _BindMoveCount;
    
    [UFToggleGroup("Tiles")]
    [UnityEngine.HideInInspector()]
    public bool _BindTiles;
    
    [UnityEngine.HideInInspector()]
    public System.Collections.Generic.List<TileViewBase> _TilesList;
    
    [UFGroup("Tiles")]
    [UnityEngine.HideInInspector()]
    public bool _TilesSceneFirst;
    
    [UFGroup("Tiles")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _TilesContainer;
    
    [UFToggleGroup("Artifacts")]
    [UnityEngine.HideInInspector()]
    public bool _BindArtifacts;
    
    [UnityEngine.HideInInspector()]
    public System.Collections.Generic.List<ArtifactViewBase> _ArtifactsList;
    
    [UFGroup("Artifacts")]
    [UnityEngine.HideInInspector()]
    public bool _ArtifactsSceneFirst;
    
    [UFGroup("Artifacts")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _ArtifactsContainer;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Rover;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TileLeft;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TileRight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TileBack;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TileFront;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TileFrontRight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TileFrontLeft;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TileBackRight;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _TileBackLeft;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CurrentTile;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _Message;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public string _MessageTitle;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public MartifactsGameState _State;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _CompleteTile;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _MoveCount;
    
    public override string DefaultIdentifier {
        get {
            return "MartifactsGame";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(MartifactsGameViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public MartifactsGameViewModel MartifactsGame {
        get {
            return ((MartifactsGameViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void RoverChanged(RoverViewModel value) {
        if (value == null && _Rover != null && _Rover.gameObject != null) {
            Destroy(_Rover.gameObject);
        }
        if (_RoverPrefab == null ) {
            this._Rover = ((RoverViewBase)(this.InstantiateView(value)));
        }
        else {
            this._Rover = ((RoverViewBase)(this.InstantiateView(this._RoverPrefab, value)));
        }
    }
    
    public virtual void TileLeftChanged(TileViewModel value) {
        if (value == null && _TileLeft != null && _TileLeft.gameObject != null) {
            Destroy(_TileLeft.gameObject);
        }
        if (_TileLeftPrefab == null ) {
            this._TileLeft = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._TileLeft = ((TileViewBase)(this.InstantiateView(this._TileLeftPrefab, value)));
        }
    }
    
    public virtual void TileRightChanged(TileViewModel value) {
        if (value == null && _TileRight != null && _TileRight.gameObject != null) {
            Destroy(_TileRight.gameObject);
        }
        if (_TileRightPrefab == null ) {
            this._TileRight = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._TileRight = ((TileViewBase)(this.InstantiateView(this._TileRightPrefab, value)));
        }
    }
    
    public virtual void TileBackChanged(TileViewModel value) {
        if (value == null && _TileBack != null && _TileBack.gameObject != null) {
            Destroy(_TileBack.gameObject);
        }
        if (_TileBackPrefab == null ) {
            this._TileBack = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._TileBack = ((TileViewBase)(this.InstantiateView(this._TileBackPrefab, value)));
        }
    }
    
    public virtual void TileFrontChanged(TileViewModel value) {
        if (value == null && _TileFront != null && _TileFront.gameObject != null) {
            Destroy(_TileFront.gameObject);
        }
        if (_TileFrontPrefab == null ) {
            this._TileFront = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._TileFront = ((TileViewBase)(this.InstantiateView(this._TileFrontPrefab, value)));
        }
    }
    
    public virtual void TileFrontRightChanged(TileViewModel value) {
        if (value == null && _TileFrontRight != null && _TileFrontRight.gameObject != null) {
            Destroy(_TileFrontRight.gameObject);
        }
        if (_TileFrontRightPrefab == null ) {
            this._TileFrontRight = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._TileFrontRight = ((TileViewBase)(this.InstantiateView(this._TileFrontRightPrefab, value)));
        }
    }
    
    public virtual void TileFrontLeftChanged(TileViewModel value) {
        if (value == null && _TileFrontLeft != null && _TileFrontLeft.gameObject != null) {
            Destroy(_TileFrontLeft.gameObject);
        }
        if (_TileFrontLeftPrefab == null ) {
            this._TileFrontLeft = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._TileFrontLeft = ((TileViewBase)(this.InstantiateView(this._TileFrontLeftPrefab, value)));
        }
    }
    
    public virtual void TileBackRightChanged(TileViewModel value) {
        if (value == null && _TileBackRight != null && _TileBackRight.gameObject != null) {
            Destroy(_TileBackRight.gameObject);
        }
        if (_TileBackRightPrefab == null ) {
            this._TileBackRight = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._TileBackRight = ((TileViewBase)(this.InstantiateView(this._TileBackRightPrefab, value)));
        }
    }
    
    public virtual void TileBackLeftChanged(TileViewModel value) {
        if (value == null && _TileBackLeft != null && _TileBackLeft.gameObject != null) {
            Destroy(_TileBackLeft.gameObject);
        }
        if (_TileBackLeftPrefab == null ) {
            this._TileBackLeft = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._TileBackLeft = ((TileViewBase)(this.InstantiateView(this._TileBackLeftPrefab, value)));
        }
    }
    
    public virtual void CurrentTileChanged(TileViewModel value) {
        if (value == null && _CurrentTile != null && _CurrentTile.gameObject != null) {
            Destroy(_CurrentTile.gameObject);
        }
        if (_CurrentTilePrefab == null ) {
            this._CurrentTile = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._CurrentTile = ((TileViewBase)(this.InstantiateView(this._CurrentTilePrefab, value)));
        }
    }
    
    public virtual void MessageChanged(string value) {
    }
    
    public virtual void MessageTitleChanged(string value) {
    }
    
    public virtual void StateChanged(MartifactsGameState value) {
    }
    
    public virtual void CompleteTileChanged(TileViewModel value) {
        if (value == null && _CompleteTile != null && _CompleteTile.gameObject != null) {
            Destroy(_CompleteTile.gameObject);
        }
        if (_CompleteTilePrefab == null ) {
            this._CompleteTile = ((TileViewBase)(this.InstantiateView(value)));
        }
        else {
            this._CompleteTile = ((TileViewBase)(this.InstantiateView(this._CompleteTilePrefab, value)));
        }
    }
    
    public virtual void MoveCountChanged(int value) {
    }
    
    public virtual void TilesAdded(TileViewBase tile) {
        this._TilesList.Add(tile);
    }
    
    public virtual void TilesRemoved(TileViewBase tile) {
        this._TilesList.Remove(tile);
        UnityEngine.Object.Destroy(tile.gameObject);
    }
    
    public virtual ViewBase CreateTilesView(TileViewModel tile) {
        return this.InstantiateView(tile);
    }
    
    public virtual void ArtifactsAdded(ArtifactViewBase artifact) {
        this._ArtifactsList.Add(artifact);
    }
    
    public virtual void ArtifactsRemoved(ArtifactViewBase artifact) {
        this._ArtifactsList.Remove(artifact);
        UnityEngine.Object.Destroy(artifact.gameObject);
    }
    
    public virtual ViewBase CreateArtifactsView(ArtifactViewModel artifact) {
        return this.InstantiateView(artifact);
    }
    
    public override void Bind() {
        if (this._BindRover) {
            this.BindProperty(()=>MartifactsGame._RoverProperty, this.RoverChanged);
        }
        if (this._BindTileLeft) {
            this.BindProperty(()=>MartifactsGame._TileLeftProperty, this.TileLeftChanged);
        }
        if (this._BindTileRight) {
            this.BindProperty(()=>MartifactsGame._TileRightProperty, this.TileRightChanged);
        }
        if (this._BindTileBack) {
            this.BindProperty(()=>MartifactsGame._TileBackProperty, this.TileBackChanged);
        }
        if (this._BindTileFront) {
            this.BindProperty(()=>MartifactsGame._TileFrontProperty, this.TileFrontChanged);
        }
        if (this._BindTileFrontRight) {
            this.BindProperty(()=>MartifactsGame._TileFrontRightProperty, this.TileFrontRightChanged);
        }
        if (this._BindTileFrontLeft) {
            this.BindProperty(()=>MartifactsGame._TileFrontLeftProperty, this.TileFrontLeftChanged);
        }
        if (this._BindTileBackRight) {
            this.BindProperty(()=>MartifactsGame._TileBackRightProperty, this.TileBackRightChanged);
        }
        if (this._BindTileBackLeft) {
            this.BindProperty(()=>MartifactsGame._TileBackLeftProperty, this.TileBackLeftChanged);
        }
        if (this._BindCurrentTile) {
            this.BindProperty(()=>MartifactsGame._CurrentTileProperty, this.CurrentTileChanged);
        }
        if (this._BindMessage) {
            this.BindProperty(()=>MartifactsGame._MessageProperty, this.MessageChanged);
        }
        if (this._BindMessageTitle) {
            this.BindProperty(()=>MartifactsGame._MessageTitleProperty, this.MessageTitleChanged);
        }
        if (this._BindState) {
            this.BindProperty(()=>MartifactsGame._StateProperty, this.StateChanged);
        }
        if (this._BindCompleteTile) {
            this.BindProperty(()=>MartifactsGame._CompleteTileProperty, this.CompleteTileChanged);
        }
        if (this._BindMoveCount) {
            this.BindProperty(()=>MartifactsGame._MoveCountProperty, this.MoveCountChanged);
        }
        if (this._BindTiles) {
            var binding = this.BindToViewCollection(() => MartifactsGame._TilesProperty);
            binding.SetAddHandler(item=>TilesAdded(item as TileViewBase));
            binding.SetRemoveHandler(item=>TilesRemoved(item as TileViewBase));
            binding.SetCreateHandler(viewModel=>{ return CreateTilesView(viewModel as TileViewModel); }); ;
            if ((_TilesContainer == null)) {
            }
            else {
                binding.SetParent(_TilesContainer);
            }
            if (_TilesSceneFirst) {
                binding.ViewFirst();
            }
        }
        if (this._BindArtifacts) {
            var binding = this.BindToViewCollection(() => MartifactsGame._ArtifactsProperty);
            binding.SetAddHandler(item=>ArtifactsAdded(item as ArtifactViewBase));
            binding.SetRemoveHandler(item=>ArtifactsRemoved(item as ArtifactViewBase));
            binding.SetCreateHandler(viewModel=>{ return CreateArtifactsView(viewModel as ArtifactViewModel); }); ;
            if ((_ArtifactsContainer == null)) {
            }
            else {
                binding.SetParent(_ArtifactsContainer);
            }
            if (_ArtifactsSceneFirst) {
                binding.ViewFirst();
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<MartifactsGameController>());
    }
    
    public virtual void ExecuteRetry() {
        this.ExecuteCommand(MartifactsGame.Retry);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        MartifactsGameViewModel martifactsGame = ((MartifactsGameViewModel)(viewModel));
        martifactsGame.Rover = this._Rover == null ? null : this._Rover.ViewModelObject as RoverViewModel;
        martifactsGame.TileLeft = this._TileLeft == null ? null : this._TileLeft.ViewModelObject as TileViewModel;
        martifactsGame.TileRight = this._TileRight == null ? null : this._TileRight.ViewModelObject as TileViewModel;
        martifactsGame.TileBack = this._TileBack == null ? null : this._TileBack.ViewModelObject as TileViewModel;
        martifactsGame.TileFront = this._TileFront == null ? null : this._TileFront.ViewModelObject as TileViewModel;
        martifactsGame.TileFrontRight = this._TileFrontRight == null ? null : this._TileFrontRight.ViewModelObject as TileViewModel;
        martifactsGame.TileFrontLeft = this._TileFrontLeft == null ? null : this._TileFrontLeft.ViewModelObject as TileViewModel;
        martifactsGame.TileBackRight = this._TileBackRight == null ? null : this._TileBackRight.ViewModelObject as TileViewModel;
        martifactsGame.TileBackLeft = this._TileBackLeft == null ? null : this._TileBackLeft.ViewModelObject as TileViewModel;
        martifactsGame.CurrentTile = this._CurrentTile == null ? null : this._CurrentTile.ViewModelObject as TileViewModel;
        martifactsGame.Message = this._Message;
        martifactsGame.MessageTitle = this._MessageTitle;
        martifactsGame.State = this._State;
        martifactsGame.CompleteTile = this._CompleteTile == null ? null : this._CompleteTile.ViewModelObject as TileViewModel;
        martifactsGame.MoveCount = this._MoveCount;
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class TileViewBase : TiledItemViewBase {
    
    [UFToggleGroup("Selected")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SelectedChanged")]
    public bool _BindSelected;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public bool _Selected;
    
    public override System.Type ViewModelType {
        get {
            return typeof(TileViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public TileViewModel Tile {
        get {
            return ((TileViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void SelectedChanged(bool value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindSelected) {
            this.BindProperty(()=>Tile._SelectedProperty, this.SelectedChanged);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TileController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        TileViewModel tile = ((TileViewModel)(viewModel));
        tile.Selected = this._Selected;
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class RoverViewBase : ViewBase {
    
    [UnityEngine.SerializeField()]
    private RoverReticle _RoverReticle;
    
    [UnityEngine.SerializeField()]
    private WheelRotation _WheelRotation;
    
    [UFToggleGroup("Battery")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("BatteryChanged")]
    public bool _BindBattery;
    
    [UFToggleGroup("State")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("StateChanged")]
    public bool _BindState;
    
    [UFToggleGroup("Speed")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SpeedChanged")]
    public bool _BindSpeed;
    
    [UFToggleGroup("TileX")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("TileXChanged")]
    public bool _BindTileX;
    
    [UFToggleGroup("TileY")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("TileYChanged")]
    public bool _BindTileY;
    
    [UFToggleGroup("DrillFactor")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("DrillFactorChanged")]
    public bool _BindDrillFactor;
    
    [UFToggleGroup("SonarTime")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("SonarTimeChanged")]
    public bool _BindSonarTime;
    
    [UFToggleGroup("MaxBattery")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("MaxBatteryChanged")]
    public bool _BindMaxBattery;
    
    [UFToggleGroup("Moves")]
    [UnityEngine.HideInInspector()]
    public bool _BindMoves;
    
    [UFToggleGroup("CollectedArtifacts")]
    [UnityEngine.HideInInspector()]
    public bool _BindCollectedArtifacts;
    
    [UnityEngine.HideInInspector()]
    public System.Collections.Generic.List<ArtifactViewBase> _CollectedArtifactsList;
    
    [UFGroup("CollectedArtifacts")]
    [UnityEngine.HideInInspector()]
    public bool _CollectedArtifactsSceneFirst;
    
    [UFGroup("CollectedArtifacts")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _CollectedArtifactsContainer;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _Battery;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public RoverState _State;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public float _Speed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _TileX;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _TileY;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _DrillFactor;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public float _SonarTime;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _MaxBattery;
    
    public override string DefaultIdentifier {
        get {
            return "Rover";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(RoverViewModel);
        }
    }
    
    public virtual RoverReticle RoverReticle {
        get {
            return _RoverReticle ?? (_RoverReticle = GetComponent<RoverReticle>());
        }
        set {
            this._RoverReticle = value;
        }
    }
    
    public virtual WheelRotation WheelRotation {
        get {
            return _WheelRotation ?? (_WheelRotation = GetComponent<WheelRotation>());
        }
        set {
            this._WheelRotation = value;
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public RoverViewModel Rover {
        get {
            return ((RoverViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void BatteryChanged(int value) {
    }
    
    public virtual void StateChanged(RoverState value) {
    }
    
    public virtual void SpeedChanged(float value) {
    }
    
    public virtual void TileXChanged(int value) {
    }
    
    public virtual void TileYChanged(int value) {
    }
    
    public virtual void DrillFactorChanged(int value) {
    }
    
    public virtual void SonarTimeChanged(float value) {
    }
    
    public virtual void MaxBatteryChanged(int value) {
    }
    
    public virtual void MovesAdded(RoverMove item) {
    }
    
    public virtual void MovesRemoved(RoverMove item) {
    }
    
    public virtual void CollectedArtifactsAdded(ArtifactViewBase artifact) {
        this._CollectedArtifactsList.Add(artifact);
    }
    
    public virtual void CollectedArtifactsRemoved(ArtifactViewBase artifact) {
        this._CollectedArtifactsList.Remove(artifact);
        UnityEngine.Object.Destroy(artifact.gameObject);
    }
    
    public virtual ViewBase CreateCollectedArtifactsView(ArtifactViewModel artifact) {
        return this.InstantiateView(artifact);
    }
    
    public override void Bind() {
        if (this._BindBattery) {
            this.BindProperty(()=>Rover._BatteryProperty, this.BatteryChanged);
        }
        if (this._BindState) {
            this.BindProperty(()=>Rover._StateProperty, this.StateChanged);
        }
        if (this._BindSpeed) {
            this.BindProperty(()=>Rover._SpeedProperty, this.SpeedChanged);
        }
        if (this._BindTileX) {
            this.BindProperty(()=>Rover._TileXProperty, this.TileXChanged);
        }
        if (this._BindTileY) {
            this.BindProperty(()=>Rover._TileYProperty, this.TileYChanged);
        }
        if (this._BindDrillFactor) {
            this.BindProperty(()=>Rover._DrillFactorProperty, this.DrillFactorChanged);
        }
        if (this._BindSonarTime) {
            this.BindProperty(()=>Rover._SonarTimeProperty, this.SonarTimeChanged);
        }
        if (this._BindMaxBattery) {
            this.BindProperty(()=>Rover._MaxBatteryProperty, this.MaxBatteryChanged);
        }
        if (this._BindMoves) {
            var binding = this.BindCollection(() => Rover._MovesProperty);
            binding.SetAddHandler(MovesAdded);
            binding.SetRemoveHandler(MovesRemoved);
        }
        if (this._BindCollectedArtifacts) {
            var binding = this.BindToViewCollection(() => Rover._CollectedArtifactsProperty);
            binding.SetAddHandler(item=>CollectedArtifactsAdded(item as ArtifactViewBase));
            binding.SetRemoveHandler(item=>CollectedArtifactsRemoved(item as ArtifactViewBase));
            binding.SetCreateHandler(viewModel=>{ return CreateCollectedArtifactsView(viewModel as ArtifactViewModel); }); ;
            if ((_CollectedArtifactsContainer == null)) {
            }
            else {
                binding.SetParent(_CollectedArtifactsContainer);
            }
            if (_CollectedArtifactsSceneFirst) {
                binding.ViewFirst();
            }
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<RoverController>());
    }
    
    public virtual void ExecuteMoveLeft() {
        this.ExecuteCommand(Rover.MoveLeft);
    }
    
    public virtual void ExecuteMoveRight() {
        this.ExecuteCommand(Rover.MoveRight);
    }
    
    public virtual void ExecuteMoveForward() {
        this.ExecuteCommand(Rover.MoveForward);
    }
    
    public virtual void ExecuteMoveBackward() {
        this.ExecuteCommand(Rover.MoveBackward);
    }
    
    public virtual void ExecuteShootFlare() {
        this.ExecuteCommand(Rover.ShootFlare);
    }
    
    public virtual void ExecuteDrill() {
        this.ExecuteCommand(Rover.Drill);
    }
    
    public virtual void ExecuteSonar() {
        this.ExecuteCommand(Rover.Sonar);
    }
    
    public virtual void ExecuteReachedDestination() {
        this.ExecuteCommand(Rover.ReachedDestination);
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        RoverViewModel rover = ((RoverViewModel)(viewModel));
        rover.Battery = this._Battery;
        rover.State = this._State;
        rover.Speed = this._Speed;
        rover.TileX = this._TileX;
        rover.TileY = this._TileY;
        rover.DrillFactor = this._DrillFactor;
        rover.SonarTime = this._SonarTime;
        rover.MaxBattery = this._MaxBattery;
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class RockyTileViewBase : TileViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(RockyTileViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public RockyTileViewModel RockyTile {
        get {
            return ((RockyTileViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<RockyTileController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class ResourceTileViewBase : TileViewBase {
    
    public override System.Type ViewModelType {
        get {
            return typeof(ResourceTileViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public ResourceTileViewModel ResourceTile {
        get {
            return ((ResourceTileViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ResourceTileController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class FlatTileViewBase : TileViewBase {
    
    [UFToggleGroup("Artifact")]
    [UnityEngine.HideInInspector()]
    public bool _BindArtifact;
    
    [UFGroup("Artifact")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _ArtifactPrefab;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Artifact;
    
    public override System.Type ViewModelType {
        get {
            return typeof(FlatTileViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public FlatTileViewModel FlatTile {
        get {
            return ((FlatTileViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void ArtifactChanged(ArtifactViewModel value) {
        if (value == null && _Artifact != null && _Artifact.gameObject != null) {
            Destroy(_Artifact.gameObject);
        }
        if (_ArtifactPrefab == null ) {
            this._Artifact = ((ArtifactViewBase)(this.InstantiateView(value)));
        }
        else {
            this._Artifact = ((ArtifactViewBase)(this.InstantiateView(this._ArtifactPrefab, value)));
        }
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindArtifact) {
            this.BindProperty(()=>FlatTile._ArtifactProperty, this.ArtifactChanged);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FlatTileController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        FlatTileViewModel flatTile = ((FlatTileViewModel)(viewModel));
        flatTile.Artifact = this._Artifact == null ? null : this._Artifact.ViewModelObject as ArtifactViewModel;
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class ArtifactViewBase : TiledItemViewBase {
    
    [UFToggleGroup("Type")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("TypeChanged")]
    public bool _BindType;
    
    [UFToggleGroup("BatteryDelta")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("BatteryDeltaChanged")]
    public bool _BindBatteryDelta;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ArtifactType _Type;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _BatteryDelta;
    
    public override System.Type ViewModelType {
        get {
            return typeof(ArtifactViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public ArtifactViewModel Artifact {
        get {
            return ((ArtifactViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void TypeChanged(ArtifactType value) {
    }
    
    public virtual void BatteryDeltaChanged(int value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindType) {
            this.BindProperty(()=>Artifact._TypeProperty, this.TypeChanged);
        }
        if (this._BindBatteryDelta) {
            this.BindProperty(()=>Artifact._BatteryDeltaProperty, this.BatteryDeltaChanged);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ArtifactController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        ArtifactViewModel artifact = ((ArtifactViewModel)(viewModel));
        artifact.Type = this._Type;
        artifact.BatteryDelta = this._BatteryDelta;
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class TiledItemViewBase : ViewBase {
    
    [UFToggleGroup("TileX")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("TileXChanged")]
    public bool _BindTileX;
    
    [UFToggleGroup("TileY")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("TileYChanged")]
    public bool _BindTileY;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _TileX;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _TileY;
    
    public override string DefaultIdentifier {
        get {
            return "TiledItem";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(TiledItemViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public TiledItemViewModel TiledItem {
        get {
            return ((TiledItemViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void TileXChanged(int value) {
    }
    
    public virtual void TileYChanged(int value) {
    }
    
    public override void Bind() {
        if (this._BindTileX) {
            this.BindProperty(()=>TiledItem._TileXProperty, this.TileXChanged);
        }
        if (this._BindTileY) {
            this.BindProperty(()=>TiledItem._TileYProperty, this.TileYChanged);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<TiledItemController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        TiledItemViewModel tiledItem = ((TiledItemViewModel)(viewModel));
        tiledItem.TileX = this._TileX;
        tiledItem.TileY = this._TileY;
    }
}

public partial class MartifactsGameView : MartifactsGameViewBase {
    
    protected override void Apply() {
        base.Apply();
        MartifactsGame.Dirty = false;
    }
}

public partial class MartifactsHudView : MartifactsGameViewBase {
    
    protected override void Apply() {
        base.Apply();
        MartifactsGame.Dirty = false;
    }
}

public partial class RoverView : RoverViewBase {
    
    private UnityEngine.Transform _transform;
    
    public virtual UnityEngine.Transform Transform {
        get {
            if ((this._transform == null)) {
                this._transform = this.GetComponent<UnityEngine.Transform>();
            }
            return this._transform;
        }
    }
    
    protected override void Apply() {
        base.Apply();
        if (Transform.hasChanged) {
            Rover.Position = Transform.position;
        }
        Rover.Dirty = false;
    }
}

public abstract partial class TileView : TileViewBase {
    
    private UnityEngine.Transform _transform;
    
    public virtual UnityEngine.Transform Transform {
        get {
            if ((this._transform == null)) {
                this._transform = this.GetComponent<UnityEngine.Transform>();
            }
            return this._transform;
        }
    }
    
    protected override void Apply() {
        base.Apply();
        if (Transform.hasChanged) {
            Tile.Position = Transform.position;
        }
        Tile.Dirty = false;
    }
}

public partial class ResourceTileView : ResourceTileViewViewBase {
    
    protected override void Apply() {
        base.Apply();
        ResourceTile.Dirty = false;
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class ResourceTileViewViewBase : TileView {
    
    public override System.Type ViewModelType {
        get {
            return typeof(ResourceTileViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public ResourceTileViewModel ResourceTile {
        get {
            return ((ResourceTileViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<ResourceTileController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class RockyTileView : RockyTileViewViewBase {
    
    protected override void Apply() {
        base.Apply();
        RockyTile.Dirty = false;
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class RockyTileViewViewBase : TileView {
    
    public override System.Type ViewModelType {
        get {
            return typeof(RockyTileViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public RockyTileViewModel RockyTile {
        get {
            return ((RockyTileViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override void Bind() {
        base.Bind();
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<RockyTileController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
    }
}

public partial class FlatTileView : FlatTileViewViewBase {
    
    protected override void Apply() {
        base.Apply();
        FlatTile.Dirty = false;
    }
}

[DiagramInfoAttribute("Martifacts")]
public abstract class FlatTileViewViewBase : TileView {
    
    [UFToggleGroup("Artifact")]
    [UnityEngine.HideInInspector()]
    public bool _BindArtifact;
    
    [UFGroup("Artifact")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.GameObject _ArtifactPrefab;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Artifact;
    
    public override System.Type ViewModelType {
        get {
            return typeof(FlatTileViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public FlatTileViewModel FlatTile {
        get {
            return ((FlatTileViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public virtual void ArtifactChanged(ArtifactViewModel value) {
        if (value == null && _Artifact != null && _Artifact.gameObject != null) {
            Destroy(_Artifact.gameObject);
        }
        if (_ArtifactPrefab == null ) {
            this._Artifact = ((ArtifactViewBase)(this.InstantiateView(value)));
        }
        else {
            this._Artifact = ((ArtifactViewBase)(this.InstantiateView(this._ArtifactPrefab, value)));
        }
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindArtifact) {
            this.BindProperty(()=>FlatTile._ArtifactProperty, this.ArtifactChanged);
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<FlatTileController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        base.InitializeViewModel(viewModel);
        FlatTileViewModel flatTile = ((FlatTileViewModel)(viewModel));
        flatTile.Artifact = this._Artifact == null ? null : this._Artifact.ViewModelObject as ArtifactViewModel;
    }
}

public partial class RoverMoveHudView : RoverViewBase {
    
    protected override void Apply() {
        base.Apply();
        Rover.Dirty = false;
    }
}

public partial class ArtifactView : ArtifactViewBase {
    
    protected override void Apply() {
        base.Apply();
        Artifact.Dirty = false;
    }
}

public partial class RoverReticle : ViewComponent {
    
    public virtual RoverViewModel Rover {
        get {
            return ((RoverViewModel)(this.View.ViewModelObject));
        }
    }
    
    public virtual void ExecuteMoveLeft() {
        this.View.ExecuteCommand(Rover.MoveLeft);
    }
    
    public virtual void ExecuteMoveRight() {
        this.View.ExecuteCommand(Rover.MoveRight);
    }
    
    public virtual void ExecuteMoveForward() {
        this.View.ExecuteCommand(Rover.MoveForward);
    }
    
    public virtual void ExecuteMoveBackward() {
        this.View.ExecuteCommand(Rover.MoveBackward);
    }
    
    public virtual void ExecuteShootFlare() {
        this.View.ExecuteCommand(Rover.ShootFlare);
    }
    
    public virtual void ExecuteDrill() {
        this.View.ExecuteCommand(Rover.Drill);
    }
    
    public virtual void ExecuteSonar() {
        this.View.ExecuteCommand(Rover.Sonar);
    }
    
    public virtual void ExecuteReachedDestination() {
        this.View.ExecuteCommand(Rover.ReachedDestination);
    }
}

public partial class WheelRotation : ViewComponent {
    
    public virtual RoverViewModel Rover {
        get {
            return ((RoverViewModel)(this.View.ViewModelObject));
        }
    }
    
    public virtual void ExecuteMoveLeft() {
        this.View.ExecuteCommand(Rover.MoveLeft);
    }
    
    public virtual void ExecuteMoveRight() {
        this.View.ExecuteCommand(Rover.MoveRight);
    }
    
    public virtual void ExecuteMoveForward() {
        this.View.ExecuteCommand(Rover.MoveForward);
    }
    
    public virtual void ExecuteMoveBackward() {
        this.View.ExecuteCommand(Rover.MoveBackward);
    }
    
    public virtual void ExecuteShootFlare() {
        this.View.ExecuteCommand(Rover.ShootFlare);
    }
    
    public virtual void ExecuteDrill() {
        this.View.ExecuteCommand(Rover.Drill);
    }
    
    public virtual void ExecuteSonar() {
        this.View.ExecuteCommand(Rover.Sonar);
    }
    
    public virtual void ExecuteReachedDestination() {
        this.View.ExecuteCommand(Rover.ReachedDestination);
    }
}
