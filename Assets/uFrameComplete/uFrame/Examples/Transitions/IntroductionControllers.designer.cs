// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;
using UnityEngine;


[System.SerializableAttribute()]
public sealed partial class IntroductionMenuSceneManagerSettings {
    
    public string[] _Scenes;
}

public class IntroductionMenuSceneManagerBase : SceneManager {
    
    public IntroductionSceneManagerSettings _PlayTransition = new IntroductionSceneManagerSettings();
    
    public IntroductionMenuSceneManagerSettings _IntroductionMenuSceneManagerSettings = new IntroductionMenuSceneManagerSettings();
    
    public IntroductionMenuScreenController IntroductionMenuScreenController { get; set; }
    public override void Setup() {
        base.Setup();
        this.IntroductionMenuScreenController = new IntroductionMenuScreenController();
        this.Container.RegisterInstance(this.IntroductionMenuScreenController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<IntroductionMenuScreenViewModel>(IntroductionMenuScreenController.CreateIntroductionMenuScreen(), false);
    }
    
    public virtual void Play() {
        GameManager.SwitchGameAndLevel<IntroductionSceneManager>((container) =>{container._IntroductionSceneManagerSettings = _PlayTransition; }, this._PlayTransition._Scenes);
    }
}

[System.SerializableAttribute()]
public sealed partial class IntroductionSceneManagerSettings {
    
    public string[] _Scenes;
}

public class IntroductionSceneManagerBase : SceneManager {
    
    public IntroductionMenuSceneManagerSettings _ExitTransition = new IntroductionMenuSceneManagerSettings();
    
    public IntroductionSceneManagerSettings _IntroductionSceneManagerSettings = new IntroductionSceneManagerSettings();
    
    public IntroductionGameController IntroductionGameController { get; set; }
    public override void Setup() {
        base.Setup();
        this.IntroductionGameController = new IntroductionGameController();
        this.Container.RegisterInstance(this.IntroductionGameController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<IntroductionGameViewModel>(IntroductionGameController.CreateIntroductionGame(), false);
    }
    
    public virtual void Exit() {
        GameManager.SwitchGameAndLevel<IntroductionMenuSceneManager>((container) =>{container._IntroductionMenuSceneManagerSettings = _ExitTransition; }, this._ExitTransition._Scenes);
    }
}

public abstract class IntroductionMenuScreenControllerBase : Controller {
    
    public virtual IntroductionMenuScreenViewModel IntroductionMenuScreen {
        get {
            return Container.Resolve<IntroductionMenuScreenViewModel>();
        }
    }
    
    public abstract void InitializeIntroductionMenuScreen(IntroductionMenuScreenViewModel introductionMenuScreen);
    
    public override void WireCommands(ViewModel viewModel) {
        var introductionMenuScreen = viewModel as IntroductionMenuScreenViewModel;
        introductionMenuScreen.Play = new Command(Play);
    }
    
    public override ViewModel CreateEmpty() {
        return new IntroductionMenuScreenViewModel();
    }
    
    public virtual IntroductionMenuScreenViewModel CreateIntroductionMenuScreen() {
        return ((IntroductionMenuScreenViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeIntroductionMenuScreen(((IntroductionMenuScreenViewModel)(viewModel)));
    }
    
    public virtual void Play() {
        this.GameEvent("Play");
    }
}

public abstract class IntroductionGameControllerBase : Controller {
    
    public virtual IntroductionGameViewModel IntroductionGame {
        get {
            return Container.Resolve<IntroductionGameViewModel>();
        }
    }
    
    public abstract void InitializeIntroductionGame(IntroductionGameViewModel introductionGame);
    
    public override void WireCommands(ViewModel viewModel) {
        var introductionGame = viewModel as IntroductionGameViewModel;
        introductionGame.Exit = new Command(Exit);
    }
    
    public override ViewModel CreateEmpty() {
        return new IntroductionGameViewModel();
    }
    
    public virtual IntroductionGameViewModel CreateIntroductionGame() {
        return ((IntroductionGameViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeIntroductionGame(((IntroductionGameViewModel)(viewModel)));
    }
    
    public virtual void Exit() {
        this.GameEvent("Exit");
    }
}
