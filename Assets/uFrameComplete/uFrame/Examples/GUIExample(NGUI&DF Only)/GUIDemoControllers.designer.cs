// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Linq;
using UnityEngine;


[System.SerializableAttribute()]
public sealed partial class GUISceneManagerSettings {
    
    public string[] _Scenes;
}

public class GUISceneManagerBase : SceneManager {
    
    public GUIGameSceneManagerSettings _PlayTransition = new GUIGameSceneManagerSettings();
    
    public GUISceneManagerSettings _GUISceneManagerSettings = new GUISceneManagerSettings();
    
    public GUIMainMenuScreenController GUIMainMenuScreenController { get; set; }
    public GUIMainMenuController GUIMainMenuController { get; set; }
    public override void Setup() {
        base.Setup();
        this.GUIMainMenuScreenController = new GUIMainMenuScreenController();
        this.Container.RegisterInstance(this.GUIMainMenuScreenController, false);
        this.GUIMainMenuController = new GUIMainMenuController();
        this.Container.RegisterInstance(this.GUIMainMenuController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<GUIMainMenuScreenViewModel>(GUIMainMenuScreenController.CreateGUIMainMenuScreen(), false);
        Container.RegisterInstance<GUIMainMenuViewModel>(GUIMainMenuController.CreateGUIMainMenu(), false);
    }
    
    public virtual void Play() {
        GameManager.SwitchGameAndLevel<GUIGameSceneManager>((container) =>{container._GUIGameSceneManagerSettings = _PlayTransition; }, this._PlayTransition._Scenes);
    }
}

[System.SerializableAttribute()]
public sealed partial class GUIGameSceneManagerSettings {
    
    public string[] _Scenes;
}

public class GUIGameSceneManagerBase : SceneManager {
    
    public GUISceneManagerSettings _QuitGameTransition = new GUISceneManagerSettings();
    
    public GUIGameSceneManagerSettings _GUIGameSceneManagerSettings = new GUIGameSceneManagerSettings();
    
    public GUIGameController GUIGameController { get; set; }
    public override void Setup() {
        base.Setup();
        this.GUIGameController = new GUIGameController();
        this.Container.RegisterInstance(this.GUIGameController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<GUIGameViewModel>(GUIGameController.CreateGUIGame(), false);
    }
    
    public virtual void QuitGame() {
        GameManager.SwitchGameAndLevel<GUISceneManager>((container) =>{container._GUISceneManagerSettings = _QuitGameTransition; }, this._QuitGameTransition._Scenes);
    }
}

public abstract class GUIMainMenuScreenControllerBase : Controller {
    
    [Inject] public GUIMainMenuController GUIMainMenuController {get;set;}
    public virtual GUIMainMenuScreenViewModel GUIMainMenuScreen {
        get {
            return Container.Resolve<GUIMainMenuScreenViewModel>();
        }
    }
    
    public abstract void InitializeGUIMainMenuScreen(GUIMainMenuScreenViewModel gUIMainMenuScreen);
    
    public override void WireCommands(ViewModel viewModel) {
        var gUIMainMenuScreen = viewModel as GUIMainMenuScreenViewModel;
        gUIMainMenuScreen.RandomName = new Command(RandomName);
    }
    
    public override ViewModel Create(System.Action<ViewModel> preInitializer = null) {
        return this.CreateGUIMainMenuScreen();
    }
    
    public virtual GUIMainMenuScreenViewModel CreateGUIMainMenuScreen(System.Action<ViewModel> preInitializer = null) {
        GUIMainMenuScreenViewModel gUIMainMenuScreen = new GUIMainMenuScreenViewModel();
        WireCommands(gUIMainMenuScreen);
        InitializeGUIMainMenuScreen(gUIMainMenuScreen);
        return gUIMainMenuScreen;
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeGUIMainMenuScreen(((GUIMainMenuScreenViewModel)(viewModel)));
    }
    
    public virtual void RandomName() {
    }
}

public abstract class GUIMainMenuControllerBase : Controller {
    
    [Inject] public GUIMainMenuScreenController GUIMainMenuScreenController {get;set;}
    public virtual GUIMainMenuViewModel GUIMainMenu {
        get {
            return Container.Resolve<GUIMainMenuViewModel>();
        }
    }
    
    public abstract void InitializeGUIMainMenu(GUIMainMenuViewModel gUIMainMenu);
    
    public override void WireCommands(ViewModel viewModel) {
        var gUIMainMenu = viewModel as GUIMainMenuViewModel;
        gUIMainMenu.Play = new Command(Play);
    }
    
    public override ViewModel Create(System.Action<ViewModel> preInitializer = null) {
        return this.CreateGUIMainMenu();
    }
    
    public virtual GUIMainMenuViewModel CreateGUIMainMenu(System.Action<ViewModel> preInitializer = null) {
        GUIMainMenuViewModel gUIMainMenu = new GUIMainMenuViewModel();
        WireCommands(gUIMainMenu);
        InitializeGUIMainMenu(gUIMainMenu);
        return gUIMainMenu;
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeGUIMainMenu(((GUIMainMenuViewModel)(viewModel)));
    }
    
    public virtual void Play() {
        this.GameEvent("Play");
    }
}

public abstract class GUIGameControllerBase : Controller {
    
    public virtual GUIGameViewModel GUIGame {
        get {
            return Container.Resolve<GUIGameViewModel>();
        }
    }
    
    public abstract void InitializeGUIGame(GUIGameViewModel gUIGame);
    
    public override void WireCommands(ViewModel viewModel) {
        var gUIGame = viewModel as GUIGameViewModel;
        gUIGame.QuitGame = new Command(QuitGame);
    }
    
    public override ViewModel Create(System.Action<ViewModel> preInitializer = null) {
        return this.CreateGUIGame();
    }
    
    public virtual GUIGameViewModel CreateGUIGame(System.Action<ViewModel> preInitializer = null) {
        GUIGameViewModel gUIGame = new GUIGameViewModel();
        WireCommands(gUIGame);
        InitializeGUIGame(gUIGame);
        return gUIGame;
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeGUIGame(((GUIGameViewModel)(viewModel)));
    }
    
    public virtual void QuitGame() {
        this.GameEvent("QuitGame");
    }
}
