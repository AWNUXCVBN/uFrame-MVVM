// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;


public abstract class AngryFlappersGameControllerBase : Controller {
    
    [Inject] public BirdController BirdController {get;set;}
    [Inject] public PipeController PipeController {get;set;}
    public virtual AngryFlappersGameViewModel AngryFlappersGame {
        get {
            return Container.Resolve<AngryFlappersGameViewModel>();
        }
    }
    
    public abstract void InitializeAngryFlappersGame(AngryFlappersGameViewModel angryFlappersGame);
    
    public override ViewModel CreateEmpty() {
        return new AngryFlappersGameViewModel();
    }
    
    public virtual AngryFlappersGameViewModel CreateAngryFlappersGame() {
        return ((AngryFlappersGameViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeAngryFlappersGame(((AngryFlappersGameViewModel)(viewModel)));
    }
    
    public virtual void GameOver() {
    }
    
    public virtual void Play() {
    }
}

public abstract class BirdControllerBase : Controller {
    
    [Inject] public AngryFlappersGameController AngryFlappersGameController {get;set;}
    public virtual BirdViewModel Bird {
        get {
            return Container.Resolve<BirdViewModel>();
        }
    }
    
    public abstract void InitializeBird(BirdViewModel bird);
    
    public override ViewModel CreateEmpty() {
        return new BirdViewModel();
    }
    
    public virtual BirdViewModel CreateBird() {
        return ((BirdViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializeBird(((BirdViewModel)(viewModel)));
    }
    
    public virtual void Flapped() {
    }
}

public abstract class PipeControllerBase : Controller {
    
    [Inject] public AngryFlappersGameController AngryFlappersGameController {get;set;}
    public abstract void InitializePipe(PipeViewModel pipe);
    
    public override ViewModel CreateEmpty() {
        return new PipeViewModel();
    }
    
    public virtual PipeViewModel CreatePipe() {
        return ((PipeViewModel)(this.Create()));
    }
    
    public override void Initialize(ViewModel viewModel) {
        this.InitializePipe(((PipeViewModel)(viewModel)));
    }
}

[System.SerializableAttribute()]
public sealed partial class AngryFlappersManagerSettings {
    
    public string[] _Scenes;
}

public class AngryFlappersManagerBase : SceneManager {
    
    public AngryFlappersManagerSettings _AngryFlappersManagerSettings = new AngryFlappersManagerSettings();
    
    public AngryFlappersGameController AngryFlappersGameController { get; set; }
    public BirdController BirdController { get; set; }
    public PipeController PipeController { get; set; }
    public override void Setup() {
        base.Setup();
        this.AngryFlappersGameController = new AngryFlappersGameController() { Container = Container, Context = Context };
        this.Container.RegisterInstance(this.AngryFlappersGameController, false);
        this.BirdController = new BirdController() { Container = Container, Context = Context };
        this.Container.RegisterInstance(this.BirdController, false);
        this.PipeController = new PipeController() { Container = Container, Context = Context };
        this.Container.RegisterInstance(this.PipeController, false);
        this.Container.InjectAll();
        Container.RegisterInstance<AngryFlappersGameViewModel>(SetupViewModel<AngryFlappersGameViewModel>(AngryFlappersGameController, "AngryFlappersGame"));
        Container.RegisterInstance<BirdViewModel>(SetupViewModel<BirdViewModel>(BirdController, "Bird"));
    }
}
