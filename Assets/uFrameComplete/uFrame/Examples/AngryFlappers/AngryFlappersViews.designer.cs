// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;


[DiagramInfoAttribute("AngryFlappers")]
public abstract class AngryFlappersGameViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public ViewBase _Bird;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public AngryFlappersGameState _State;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public int _Score;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public float _PipeSpawnSpeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public float _ScrollSpeed;
    
    public override string DefaultIdentifier {
        get {
            return "AngryFlappersGame";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(AngryFlappersGameViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public AngryFlappersGameViewModel AngryFlappersGame {
        get {
            return ((AngryFlappersGameViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<AngryFlappersGameController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        AngryFlappersGameViewModel angryFlappersGame = ((AngryFlappersGameViewModel)(viewModel));
        angryFlappersGame.Bird = this._Bird == null ? null : this._Bird.ViewModelObject as BirdViewModel;
        angryFlappersGame.State = this._State;
        angryFlappersGame.Score = this._Score;
        angryFlappersGame.PipeSpawnSpeed = this._PipeSpawnSpeed;
        angryFlappersGame.ScrollSpeed = this._ScrollSpeed;
    }
    
    public virtual void ExecuteGameOver() {
        this.ExecuteCommand(AngryFlappersGame.GameOver);
    }
    
    public virtual void ExecutePlay() {
        this.ExecuteCommand(AngryFlappersGame.Play);
    }
}

[DiagramInfoAttribute("AngryFlappers")]
public abstract class BirdViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public BirdState _State;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public float _Gravity;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public float _MaxSpeed;
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public float _FlapVelocity;
    
    public override string DefaultIdentifier {
        get {
            return "Bird";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(BirdViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return false;
        }
    }
    
    public BirdViewModel Bird {
        get {
            return ((BirdViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<BirdController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        BirdViewModel bird = ((BirdViewModel)(viewModel));
        bird.State = this._State;
        bird.Gravity = this._Gravity;
        bird.MaxSpeed = this._MaxSpeed;
        bird.FlapVelocity = this._FlapVelocity;
    }
    
    public virtual void ExecuteFlapped() {
        this.ExecuteCommand(Bird.Flapped);
    }
    
    public virtual void ExecuteHit() {
        this.ExecuteCommand(Bird.Hit);
    }
}

[DiagramInfoAttribute("AngryFlappers")]
public abstract class PipeViewBase : ViewBase {
    
    [UFGroup("View Model Properties")]
    [UnityEngine.HideInInspector()]
    public float _ScrollSpeed;
    
    public override string DefaultIdentifier {
        get {
            return "Pipe";
        }
    }
    
    public override System.Type ViewModelType {
        get {
            return typeof(PipeViewModel);
        }
    }
    
    public override bool IsMultiInstance {
        get {
            return true;
        }
    }
    
    public PipeViewModel Pipe {
        get {
            return ((PipeViewModel)(this.ViewModelObject));
        }
        set {
            this.ViewModelObject = value;
        }
    }
    
    public override ViewModel CreateModel() {
        return this.RequestViewModel(GameManager.Container.Resolve<PipeController>());
    }
    
    protected override void InitializeViewModel(ViewModel viewModel) {
        PipeViewModel pipe = ((PipeViewModel)(viewModel));
        pipe.ScrollSpeed = this._ScrollSpeed;
    }
}

public class AngryFlappersGameViewViewBase : AngryFlappersGameViewBase {
    
    [UFToggleGroup("State")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("StateChanged")]
    public bool _BindState = true;
    
    [UFToggleGroup("Score")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("ScoreChanged")]
    public bool _BindScore = true;
    
    [UFToggleGroup("Pipes")]
    [UnityEngine.HideInInspector()]
    public bool _BindPipes = true;
    
    [UnityEngine.HideInInspector()]
    public System.Collections.Generic.List<PipeViewBase> _PipesList;
    
    [UFGroup("Pipes")]
    [UnityEngine.HideInInspector()]
    public bool _PipesSceneFirst;
    
    [UFGroup("Pipes")]
    [UnityEngine.HideInInspector()]
    public UnityEngine.Transform _PipesContainer;
    
    public virtual void StateChanged(AngryFlappersGameState value) {
    }
    
    public virtual void ScoreChanged(int value) {
    }
    
    public virtual ViewBase CreatePipesView(PipeViewModel value) {
        return this.InstantiateView(value);
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindState) {
            this.BindProperty(()=>AngryFlappersGame._StateProperty, this.StateChanged);
        }
        if (this._BindScore) {
            this.BindProperty(()=>AngryFlappersGame._ScoreProperty, this.ScoreChanged);
        }
        if (this._BindPipes) {
            var binding = this.BindToViewCollection(() => AngryFlappersGame._PipesProperty);
            if ((_PipesContainer == null)) {
            }
            else {
                binding.SetParent(_PipesContainer);
            }
            if (_PipesSceneFirst) {
                binding.ViewFirst();
            }
            binding.SetCreateHandler(viewModel=>{ return CreatePipesView(viewModel as PipeViewModel); }); ;
        }
    }
}

public partial class AngryFlappersGameView : AngryFlappersGameViewViewBase {
}

public class BirdViewViewBase : BirdViewBase {
    
    [UFToggleGroup("State")]
    [UnityEngine.HideInInspector()]
    [UFRequireInstanceMethod("StateChanged")]
    public bool _BindState = true;
    
    public virtual void StateChanged(BirdState value) {
    }
    
    public override void Bind() {
        base.Bind();
        if (this._BindState) {
            this.BindProperty(()=>Bird._StateProperty, this.StateChanged);
        }
    }
}

public partial class BirdView : BirdViewViewBase {
}

public class PipeViewViewBase : PipeViewBase {
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class PipeView : PipeViewViewBase {
}

public class GroundViewViewBase : AngryFlappersGameViewBase {
    
    public override void Bind() {
        base.Bind();
    }
}

public partial class GroundView : GroundViewViewBase {
}
