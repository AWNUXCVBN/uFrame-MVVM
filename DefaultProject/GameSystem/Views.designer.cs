// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using uFrame.MVVM;
using uFrame.MVVM.Bindings;

namespace uFrame.DefaultProject
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using UniRx;
    using UnityEngine;

        public class LoadingScreenViewBase : ViewBase
        {

            [UnityEngine.SerializeField()] [UFGroup("View Model Properties")] [UnityEngine.HideInInspector()] public
                Single _Progress;

            [UnityEngine.SerializeField()] [UFGroup("View Model Properties")] [UnityEngine.HideInInspector()] public
                String _Message;

            [UnityEngine.SerializeField()] [UFGroup("View Model Properties")] [UnityEngine.HideInInspector()] public
                Boolean _Active;

            [UFToggleGroup("Message")] [UnityEngine.HideInInspector()] public bool _BindMessage = true;

            [UFGroup("Message")] [UnityEngine.SerializeField()] [UnityEngine.HideInInspector()] [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Messageinput")] protected UnityEngine.UI.Text
                _MessageInput;

            [UFToggleGroup("Progress")] [UnityEngine.HideInInspector()] public bool _BindProgress = true;

            [UFGroup("Progress")] [UnityEngine.SerializeField()] [UnityEngine.HideInInspector()] [UnityEngine.Serialization.FormerlySerializedAsAttribute("_Progressslider")] protected UnityEngine.UI.Slider
                _ProgressSlider;

            [UFToggleGroup("Active")] [UnityEngine.HideInInspector()] public bool _BindActive = true;

            [UFGroup("Active")] [UnityEngine.SerializeField()] [UnityEngine.HideInInspector()] [UnityEngine.Serialization.FormerlySerializedAsAttribute("_ActiveonlyWhenChanged")] protected bool
                _ActiveOnlyWhenChanged;

            public override string DefaultIdentifier
            {
                get { return "LoadingScreen"; }
            }

            public override System.Type ViewModelType
            {
                get { return typeof (LoadingScreenViewModel); }
            }

            public LoadingScreenViewModel LoadingScreen
            {
                get { return (LoadingScreenViewModel) ViewModelObject; }
            }

            protected override void InitializeViewModel(ViewModel model)
            {
                base.InitializeViewModel(model);
                // NOTE: this method is only invoked if the 'Initialize ViewModel' is checked in the inspector.
                // var vm = model as LoadingScreenViewModel;
                // This method is invoked when applying the data from the inspector to the viewmodel.  Add any view-specific customizations here.
                var loadingscreenview = ((LoadingScreenViewModel) model);
                loadingscreenview.Progress = this._Progress;
                loadingscreenview.Message = this._Message;
                loadingscreenview.Active = this._Active;
            }

            public override void Bind()
            {
                base.Bind();
                // Use this.LoadingScreen to access the viewmodel.
                // Use this method to subscribe to the view-model.
                // Any designer bindings are created in the base implementation.
                if (_BindMessage)
                {
                    this.BindTextToProperty(_MessageInput, this.LoadingScreen.MessageProperty);
                }
                if (_BindProgress)
                {
                    this.BindSliderToProperty(_ProgressSlider, this.LoadingScreen.ProgressProperty);
                }
                if (_BindActive)
                {
                    this.BindProperty(this.LoadingScreen.ActiveProperty, this.ActiveChanged, _ActiveOnlyWhenChanged);
                }
            }

            public virtual void ActiveChanged(Boolean arg1)
            {
            }
        }
    
}